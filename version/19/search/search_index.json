{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Start","text":"<p>TAON  Typescript Angular Orm Node )</p> <p>( ALPHA VERSION - For early testing and feedback only. )</p> <p>Taon \ud83d\udd25\ud83d\udd25\ud83d\udd25 is a solution (global cli tool &amp; framework &amp; cloud) for</p> <p>+ TypesScript isomorphic libraries/backends/frontends</p> <p>+ Angular libraries and PWA-s</p> <p>+ Databases with Orm (TypeORM)  - sql.js - NodeJs Server Mode  - sql.js - WEBSQL Server Mode (backend in browser)  - mysql - Mysql Server Mode (inside docker) </p> <p>+ NodeJS backends</p> <p>+ Electron desktop apps</p> <p>+ Ionic mobile apps</p> <p>+ Visual Studio Code plugins</p> <p>+ Documentation: - MkDocs beautifull material wrapper for *.md docs files  - Storybook ui elements documentation  - Compodoc docs from comments </p> <p>backend/frontend *isomorphic  apps/libs.</p> <p>READ DOCUMENTATION</p>"},{"location":"#initial-requirements-of-taon","title":"Initial requirements of taon","text":"<ol> <li> <p>Installed git   (on windows only supported gitbash or new powershell pwsh)</p> </li> <li> <p>Increased watchers limit (only on linux): <pre><code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</code></pre></p> </li> <li>Installed python3  and mkdocs:</li> </ol> <p>Windwos/Linux <pre><code>pip3 install mkdocs\npip3 install mkdocs-material --user\n</code></pre> MacOs <pre><code>brew install mkdocs\nbrew install mkdocs-material\n</code></pre></p>"},{"location":"#supported-os-es","title":"Supported OS-es:","text":"<ul> <li>Win10, Win11 (gitbash)</li> <li>MacOS</li> <li>Linux</li> </ul>"},{"location":"#required-version-of-nodejs","title":"Required version of NodeJS","text":"<ul> <li>Windows 10/11 (gitbash,pwsh): &gt;= v18</li> <li>MacOS: &gt;= v18</li> <li>Linux: &gt;= v18</li> </ul>"},{"location":"#how-to-install-taon","title":"How to install taon","text":"<pre><code>npm i -g taon\n</code></pre>"},{"location":"#how-to-uninstall-taon-from-local-machine","title":"How to uninstall taon from local machine","text":"<p>Taon stores a big global container (in ~/.taon) for npm packages  that are being shared across all taon projects.</p> <pre><code>npm uninstall -g taon\nrm -rf ~/.taon  # taon local packages repository\n</code></pre>"},{"location":"#projects-that-are-part-of-taondev","title":"Projects that are part of taon.dev:","text":"<ul> <li>taon https://github.com/darekf77/taon<ul> <li>framework library</li> </ul> </li> <li>tnp https://github.com/darekf77/tnp<ul> <li>main cli / code structuring tool</li> </ul> </li> <li>taon-core https://github.com/darekf77/tnp-core<ul> <li>essential/core helpers for all projects</li> </ul> </li> <li>taon-class-helpers https://github.com/darekf77/typescript-class-helpers<ul> <li>helpers for OOP class names based</li> </ul> </li> <li>taon-config https://github.com/darekf77/tnp-config<ul> <li>config/models for general purpose</li> </ul> </li> <li>taon-cli https://github.com/darekf77/tnp-cli<ul> <li>helpers/abstraction for global cli tools NodeJS based</li> </ul> </li> <li>taon-helpers https://github.com/darekf77/tnp-helpers<ul> <li>extended core helpers</li> </ul> </li> <li>taon-json https://github.com/darekf77/json10<ul> <li>handle JSON in better way</li> </ul> </li> <li>taon-logger https://github.com/darekf77/ng2-logger<ul> <li>logging in isomorphic apps</li> </ul> </li> <li>taon-typeorm https://github.com/darekf77/taon-typeorm<ul> <li>TypeOrm fork </li> </ul> </li> <li>taon-type-sql https://github.com/darekf77/taon-type-sql<ul> <li>strongly type sql</li> </ul> </li> <li>taon-rest https://github.com/darekf77/ng2-rest<ul> <li>easy rest api</li> </ul> </li> <li>taon-incremental-watcher https://github.com/darekf77/incremental-compiler<ul> <li>abstraction for incremental builders NodeJS based </li> </ul> </li> <li>taon-storage https://github.com/darekf77/taon-storage<ul> <li>ts decorators based storage solution</li> </ul> </li> <li>taon-walk-object https://github.com/darekf77/lodash-walk-object<ul> <li>iterate over deep properties in object</li> </ul> </li> </ul>"},{"location":"#global-npm-dependencies-installed-with-taon","title":"Global npm dependencies installed with taon","text":"<p>Installation happens when you first time use taon <pre><code>[\n  // tool for minifying js (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'ncc', version: '0.36.0', installName: '@vercel/ncc' },\n  // zip extractor.. no needed anymore (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'extract-zip', version: '1.6.7' },\n  // copy catalogs (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'cpr' },\n  // check version of your nodejs\n  { name: 'check-node-version' },\n  // alternative not npx ( it wil not download package from npm if is not installed )\n  { name: 'npm-run', version: '4.1.2' },\n  //handy for removing files\n  { name: 'rimraf', version: '3.0.2' },\n  //handy for recreating catalogs\n  { name: 'mkdirp' },\n  // rename files in build  (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'renamer', version: '2.0.1' },\n  // run/watch node server (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'nodemon' },\n  // check circural deps (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'madge' },\n  // package manager\n  { name: 'yarn' },\n  // https server with --base-href\n  { name: 'taon-http-server' },\n  // code formatter\n  { name: 'prettier' },\n  // process killer\n  { name: 'fkill', installName: 'fkill-cli' },\n  // for unit tests runner (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'mocha' },\n  // for unit tests runner\n  { name: 'jest' },\n  // run ts code directly  (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'ts-node' },\n  // oficial vsce package striped out from some restrictions\n  { name: 'taon-vsce' },\n  // analyze you final bundle (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'webpack-bundle-analyzer' },\n  // strip types from TypeScript\n  { name: 'babel', installName: 'babel-cli' },\n  // create js bundle that are not human readable (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'javascript-obfuscator', version: '4' },\n  // minify js (WILL BE REMOVED SOON FROM GLOBAL DEPSS)\n  { name: 'uglifyjs', installName: 'uglify-js' },\n]\n</code></pre></p>"},{"location":"BUILD-INFO/","title":"CURRENT BUILD INFO","text":""},{"location":"BUILD-INFO/#normal-app-frontend","title":"NORMAL APP FRONTEND:","text":"<p>http://localhost:4265</p> <ul> <li>normal app node backend: http://localhost:4106</li> </ul>"},{"location":"BUILD-INFO/#websql-app-backendfrontend","title":"WEBSQL APP BACKEND/FRONTEND:","text":"<p>http://localhost:4266</p>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#changes-v19","title":"Changes v19","text":"<ul> <li>\u2705 angular 19 support</li> </ul>"},{"location":"CHANGELOG/#changes-v18","title":"Changes v18","text":"<ul> <li>\u2705 firedev -&gt; taon rebranding</li> <li>\u2705 angular 18 support</li> </ul>"},{"location":"CHANGELOG/#changes-v16","title":"Changes v16","text":"<ul> <li>\u2705 angular 16 support</li> <li>\u2705 global npm container for all projects</li> <li>\u2705 standalone projects support (app + lib)</li> <li>\u2705 organization projects support</li> <li>\u2705 stable isomorphic library build</li> <li>\u2705 release app to github /docs</li> <li>\u2705 websql mode for mocked backend in github /docs</li> </ul>"},{"location":"CLI/","title":"CLI","text":""},{"location":"CLI/#create-new-project","title":"Create new project","text":"<pre><code># create single standalone project\ntaon new my-standalone-project\n\n# create container with on standalone project\ntaon new my-projects-container/my-project\n\n# create folder/container my-container-org and mark it as organization\ntaon new @my-container-org/my-project\n</code></pre>"},{"location":"CLI/#build-release-artifacts","title":"Build &amp; Release artifacts","text":"<p>Supported artifacts by taon cli:</p> <ul> <li>npm lib (entrypoint ./src/lib/index.ts)</li> <li>cli tool (entrypoint ./src/cli.ts)</li> <li>fe/be angular/node app  (entrypoint ./src/app.ts)</li> <li>electron app  (entrypoint ./src/app.electron.ts)</li> <li>vscode plugin (entrypoint ./src/app.vscode.ts)</li> <li>mobile cordova app (entrypoint ./src/app.mobile.ts)</li> <li>docs (mkdocs, storybook, compodoc) **/*.md, **/*.story.ts</li> </ul>"},{"location":"CLI/#build-process","title":"Build process","text":"<p>Single easy to remember build command</p> <pre><code>taon build:lib # \"ng build\"  form npm lib and whole /src\ntaon bl\n\ntaon build:watch:lib # \"ng build --watch\"  form npm lib and whole /src\ntaon bwl\n\n# REMEMBER: lib build command but be executed before each app/electron build\n\ntaon build:watch:app # \"ng serve\" for website apps\ntaon bwa\n\ntaon build:watch:electron # \"ng serve\" for electron apps\ntaon bwe\n</code></pre>"},{"location":"CLI/#scenario-1-developing-websitenpm-library","title":"Scenario 1: developing website/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> second terminal (wait for this command until lib build finish) <pre><code>taon build:watch:app # or taon bwa\n</code></pre></p>"},{"location":"CLI/#scenario-2-developing-electron-appnpm-library","title":"Scenario 2: developing electron app/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> second terminal (wait for this command until lib build finish) <pre><code>taon build:watch:electron # or taon bwe\n</code></pre></p>"},{"location":"CLI/#scenario-3-developing-vscode-extensionnpm-library","title":"Scenario 3: developing vscode extension/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> Each start of VSCode debugger recreates menu options </p>"},{"location":"CLI/#release-process","title":"Release process","text":"<p>Single easy to remember release command</p> <pre><code># show release menu\ntaon release\ntaon r\n\n# release all stuff from taon.jsonc autoReleaseConfigAllowedItems\ntaon auto:release\ntaon ar\n</code></pre>"},{"location":"CLI/#link-project-or-bundle","title":"Link project or bundle","text":"<p>Similar command to npm link for taon projects <pre><code># - link local lib/cli development build as global cli tool\n# - link local repo cli as global cli tools\ntaon link\n</code></pre></p>"},{"location":"CLI/#migrations-for-databases","title":"Migrations (for databases)","text":"<pre><code>taon migration # migration menu\ntaon m\n\n# create migration file (with classes for all detected contexts)\ntaon migration:create \ntaon mc\n\n # run all migrations (for all contexts)\ntaon migration:run   # similar to 'taon run', but won't start express\ntaon mr              # server and it will stop after contexts\n                    # initialize() functions...\n\n # revert migration to timestamp\ntaon migration:revert timestamp  # similar to 'taon run', but won't start express\ntaon mr timestamp                # server and it will stop after contexts\n                                # initialize() functions...\n</code></pre>"},{"location":"CLI/#testing","title":"Testing","text":"<pre><code># Unit/Integration tests (jest)\ntaon test\ntaon t\n\ntaon test:watch\ntaon tw\n\n# recreate jest snapshots\ntaon test:up:snapshots\ntaon tu\n\n# E2e testing (playwright)\ntaon e2e\ntaon e2e:watch\n</code></pre>"},{"location":"CLI/#git","title":"Git","text":""},{"location":"CLI/#handy-shortcuts","title":"Handy shortcuts","text":"<p><code>taon soft</code>  =&gt; <code>git reset --soft HEAD~1</code></p> <p><code>taon hosts</code>  =&gt; open hosts files in VSCode</p> <p><code>taon count:commits</code>  =&gt; show origin of project</p> <p><code>taon remove:submodules</code>  =&gt; remove all submodules from repo</p> <p><code>taon remove:submodule my-not-wanted-git-submodules</code>  =&gt; remove submodule by folder name</p> <p><code>taon remove:tag git-tag-name-optionally</code> =&gt; remove git tag (if not provided name - select menu appears)</p> <p><code>taon last:tag</code> =&gt; display info aboutlast tag</p>"},{"location":"CLI/#remotes","title":"Remotes","text":"<p><code>taon origin</code>  =&gt; show origin of project</p> <p><code>taon remote</code>  =&gt; <code>taon origin</code> </p> <p><code>taon origins</code>  =&gt; show all origins of project</p> <p><code>taon remotes</code>  =&gt; <code>taon origins</code></p> <p><code>taon rename:origin http://my-new-origin</code>  =&gt; replaces default origin new provided</p> <p><code>taon set:origin http://my-new-origin</code>  =&gt; alias to rename:origin</p> <p><code>taon set:remote:ssh</code>  =&gt; changes http remote to ssh remote</p> <p><code>taon set:remote:http</code>  =&gt; changes ssh remote to https remote</p>"},{"location":"CLI/#rebase","title":"Rebase","text":"<p><code>taon rebase</code>  =&gt; rebase current branch with default branch</p> <p><code>taon rebase branch-to-rebase</code>  =&gt; rebase current branch with changes from branch-to-rebase</p>"},{"location":"CLI/#stash","title":"Stash","text":"<p><code>taon stash</code>  =&gt; stash only staged files</p> <p><code>taon stashall</code>  =&gt; stash all files</p>"},{"location":"CLI/#reset-change-branch","title":"Reset + change branch","text":"<p><code>taon branch</code>  =&gt; git fetch / display menu with branches to select / select branch</p> <p><code>taon reset</code>  =&gt; <code>git fetch</code> + remove tmp files for project + <code>taon branch</code> (include children)</p> <p><code>taon reset my-branch</code>  =&gt; same as <code>taon reset</code> but specific branch</p> <p><code>taon reset</code>  =&gt; reset hard and pull (recrusively)</p>"},{"location":"CLI/#pull","title":"Pull","text":"<p><code>taon pull</code>  =&gt; pull current branch or current workspace projects one after another</p> <p><code>taon repull</code>  =&gt; <code>git reset hard --HEAD~10</code> + <code>taon pull</code></p>"},{"location":"CLI/#push","title":"Push","text":"<p><code>taon pushall</code> =&gt; push code to all remotes(origins) defined in .git/config</p> <p><code>taon pall</code> =&gt; <code>taon pushall</code></p> <p><code>taon push</code>  =&gt; (optionally git add +)  commit with message based on branch name + push current branch</p>"},{"location":"CLI/#smart-conventional-commits-branching","title":"Smart Conventional Commits Branching","text":"<p>Checkout branch + add changes + commit message + push branch</p> <p>Create special branches (with metadata inside name) that can be use later with command <code>taon push</code> to \"re-push\" changes and use matadata from branch name   as commit message.</p>"},{"location":"CLI/#fix","title":"fix","text":"<p>Quick commit and push bugfix <code>taon pfix JIRA-379089 JIRA-380320 proper counter message [my-lib]</code>   &lt;=&gt; <code>git checkout -b bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code> +  <code>git add</code> +  <code>git commit -m \"fix(my-lib): proper counter message JIRA-379089 JIRA-380320\"</code> +  <code>git push origin bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code></p> <p>taon pfix &lt;=&gt; taon pushfix &lt;=&gt; taon push:fix</p>"},{"location":"CLI/#feature","title":"feature","text":"<p>Quick commit and push feature <code>taon pf JIRA-379089 JIRA-380320 admin notification [my-lib]</code>  &lt;&gt;=&gt; <code>git checkout -b feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code> +  <code>git add</code> +  <code>git commit -m \"feat(my-lib): admin notification JIRA-379089 JIRA-380320\"</code> +  <code>git push origin feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code></p> <p>taon pf &lt;=&gt; taon pushfeature &lt;=&gt; taon push:feature</p>"},{"location":"CLI/#chore","title":"chore","text":"<p>Quick commit and push chore  <code>taon pc JIRA-379089 update deps</code> &lt;=&gt;   <code>git checkout -b chore/JIRA-379089-update-deps</code> +  <code>git add</code> +  <code>git commit -m \"chore: update deps JIRA-379089\"</code> +  <code>git push origin  chore/JIRA-379089-update-deps</code></p> <p>taon pc &lt;=&gt; taon chore &lt;=&gt; taon pchore</p>"},{"location":"CLI/#docs","title":"docs","text":"<p>Quick commit and push docs update  <code>taon pd explained installation</code>  &lt;=&gt;  <code>git checkout -b docs/explained-installation</code> +  <code>git add</code> +  <code>git commit -m \"docs:explained installation\"</code> +  <code>git push origin docs/explained-installation</code></p> <p>taon pd &lt;=&gt; taon pdocs</p>"},{"location":"CLI/#test","title":"test","text":"<p>Quick commit and push tests update  <code>taon ptest admin permission new use case</code>  &lt;=&gt;  <code>git checkout -b test/admin-permission-new-use-case</code> +  <code>git add</code> +  <code>git commit -m \"test: admin permission new use case\"</code> +  <code>git push origin test/admin-permission-new-use-case</code></p> <p>taon push:test &lt;=&gt; taon ptest  &lt;=&gt; taon ptests</p>"},{"location":"CLI/#styl","title":"styl","text":"<p>Quick commit and push style update (formatting, linting etc.)  <code>taon pstyle proper project methods</code>  &lt;=&gt;  <code>git checkout -b style/proper-project-methods</code> +  <code>git add</code> +  <code>git commit -m \"style: proper project methods\"</code> +  <code>git push origin style/proper-project-methods</code></p> <p>taon pstyl &lt;=&gt; taon pstyle</p>"},{"location":"CLI/#refactor","title":"refactor","text":"<p>Quick commit and push code refactor  <code>taon pref new permission module</code>  &lt;=&gt;  <code>git checkout -b refactor/new-permission-module</code> +  <code>git add</code> +  <code>git commit -m \"refactor: new permission module\"</code> +  <code>git push origin refactor/new-permission-module</code></p> <p>taon pref &lt;=&gt; taon prefactor</p>"},{"location":"CLI/#release","title":"release","text":"<p>Quick commit and push release commit  <code>taon prelease</code>  &lt;=&gt;  <code>git checkout -b release/version-v1-2-3</code> +  <code>git add</code> +  <code>git commit -m \"release: version v1.2.3\"</code> +  <code>git push origin release/version-1-2-3</code></p> <p>taon prel &lt;=&gt; taon prelase</p>"},{"location":"TODO/","title":"TODO","text":""},{"location":"TODO/#taon-v20xx","title":"Taon v20.X.X","text":"<ul> <li>\ud83d\udd32 angular v20 support</li> <li>\ud83d\udd32 2FA authentication</li> <li>\ud83d\udd32 simple online payments</li> </ul>"},{"location":"TODO/#taon-v19xx-current-version","title":"Taon v19.X.X (CURRENT VERSION)","text":"<ul> <li>\ud83d\udd32 angular v19 support</li> <li>\ud83d\udd32 2FA authentication keycloak</li> <li>\ud83d\udd32 simple online payments</li> <li>\ud83d\udd32 fast/stable packeges installer solution</li> <li>\ud83d\udd32 organization build based on standalone (single process with multiple entrypoints build)</li> <li>\ud83d\udd32 organization multi window electron app</li> <li>\ud83d\udd32 cloud build: electron, cli, lib, vscode</li> <li>\ud83d\udd32 docs examples for better understranding</li> <li>\ud83d\udd32 relaltime development FE/BE and BE/BE</li> <li>\ud83d\udd32 basic authentication</li> <li>\ud83d\udd32 excellent isomorphic development programmer experience</li> <li>\ud83d\udd32 simple CD/CI develop/build/deploy process</li> <li>\ud83d\udd32 local release electron, cli, vscode ext.</li> <li>\ud83d\udd32 script installation for server (curl -o- https://taon.dev/install-on-server-script.sh | bash)</li> <li>\ud83d\udd32 release standalone package as @organization/package</li> </ul>"},{"location":"TODO/#taon-v18xx","title":"Taon v18.X.X","text":"<ul> <li>\u2705 angular v18 support</li> <li>\u2705 firedev -&gt; taon (rebranding)</li> <li>\u2705 docs for new framework api</li> <li>\u2705 docs update for new cli</li> </ul>"},{"location":"TODO/#taon-firedev-v17xx","title":"Taon (Firedev) v17.X.X","text":"<p>&lt; skipped &gt;</p>"},{"location":"TODO/#taon-firedev-v16xx","title":"Taon (Firedev) v16.X.X","text":"<ul> <li>\u2705 angular v16 support</li> <li>\u2705 global packages container isomorphic library build</li> <li>\u2705 normal and websql app build</li> <li>\u2705 release/build/deploy websql or normal app to github pages</li> <li>\u2705 electron app build</li> <li>\u2705 prettier, eslint</li> <li>\u2705 taon git commands</li> <li>\u2705 global sources linked inside import src/</li> <li>\u2705 auto impors fix from 'isomorphic-lib/lib' to 'isomorphic-lib/src'</li> </ul>"},{"location":"docs/FRAMEWORK/","title":"Framework","text":""},{"location":"docs/FRAMEWORK/#files-structure","title":"Files structure","text":"<p>Taon has very flexible structure for build apps and libraries. Each project can is at the same time library and app. File <code>taon.jsonc</code> tells taon cli crucial structure information about project (when building/releasing etc.).</p>"},{"location":"docs/FRAMEWORK/#types-of-projects","title":"Types of projects","text":"<p>Taon has 2 types of projects:</p> <ul> <li>standalone </li> <li>simple project with source code inside <code>/src</code> folder</li> <li>watch mode for development</li> <li>container </li> <li>contains multiple standalone projects </li> <li>all projects can be init/clean/build/release together</li> <li>not possible watch mode for development</li> </ul>"},{"location":"docs/FRAMEWORK/#standalone","title":"Standalone","text":"<p>Each taon project should have distinct name that follows npm package naming convention (but without @,.,_/).</p> <p>To simplify development process (in standalone project): npm name, folder basename name and package.json name property are equal by default (you can override npm name with property \"overrideNpmName\" inside <code>taon.jsonc</code>).</p> <p>Command <code>taon init</code> will make sure that <code>package.json name property</code> is the same as basename of project folder.</p>"},{"location":"docs/FRAMEWORK/#container","title":"Container","text":"<p>Scoped/organization projects are simply standalone projects inside container (with proper \"isOrganization\" in <code>taon.jsonc</code>).</p> <p>Name of publish package is taken from container name:</p> <p><code>@parent-container/my-package-name</code></p>"},{"location":"docs/FRAMEWORK/#isomorphic-compiled-npm-package","title":"Isomorphic compiled npm package","text":"<p>Isomorphic npm package contains all necessary js (or mjs) files for backend and frontend:</p> <pre><code># Structure of isomorphic library\n\n/lib # all backend es5 javascript code\n/browser # browser code for normal NodeJs/Angular development\n/websql # special version of browser code for WEBSQL development\n/scss # folder with all scss file from /src\n/bin # cli related files\n/assets/shared # shared assets from project /src/assets/shared folder\n</code></pre>"},{"location":"docs/FRAMEWORK/#rules-of-writing-taon-code","title":"Rules of writing taon code","text":"<p>During development of taon apps/libs we must know that some files are by default only for browser/frontend purpose or just for NodeJs/backend purpose.</p> <p>Good practice here is to write each isomorphic files in the way that we can use it in backend and frontend without any additional work.</p>"},{"location":"docs/FRAMEWORK/#files-with-special-extensions","title":"Files with special extensions","text":"<p>+ Frontend only files (available also in websql backend mode)</p> <ul> <li>*.browser.ts (-- any file --)</li> <li>.component.ts (angular components)*</li> <li>.container.ts (angular container components)*</li> <li>.directive.ts (angular directives)*</li> <li>.pipe.ts (angular pipes)*</li> <li>.module.ts (angular modules)*</li> <li>.service.ts (angular services)*</li> <li>.store.ts (ngrx store)*</li> <li>.actions.ts (ngrx actions )*</li> <li>.effects.ts (ngrx effects)*</li> <li>.reducers.ts (ngrx directives)*</li> <li>.selectors.ts (ngrx selectors)*</li> <li>.routes.ts (angular router files)*</li> </ul> <p>additionally all .css, sass, .html are not available for NodeJS backend code</p> <p>+ Backend only files (available also in WEBSQL mode)</p> <ul> <li>.test.ts (mocha/sinon backend tests)*</li> <li>.spec.ts (jest tests files)*</li> <li>.cy.ts (cypress tests files)*</li> </ul> <p>+ Backend only files (not available in WEBSQL)</p> <ul> <li>.backend.ts (nodejs backend code)*</li> </ul> <p>PLEASE REMEMBER THAT example-file-name-backend.ts is NOT a NodeJS backend only code.</p>"},{"location":"docs/FRAMEWORK/#code-regions","title":"Code regions","text":"<p>Taon framework splits each .ts to different temporary source folder that serve different purposes. From original.ts files code regions/lines are removed based on region tag.</p> <p>+ Code for NodeJs/Websql backend:</p> <p><code>//#region @websql</code></p> <p>/code/</p> <p><code>//#endregion</code></p> <p>+ Same as above for function return :</p> <p><code>//#region @websqlFunc</code></p> <p>/code/</p> <p><code>//#endregion</code></p> <p>When you should use @websql, @websqlFunc: -&gt; generally this should be most often used tool for striping backend code (you never know if some of your backend files are going to be needed on frontend for some reason)</p> <pre><code>function myFunc():string {\n  //@websqlFunc\n  return 'hello in backend'l\n  //#endregion\n}\n\n// in browser (not WEBSQL mode) there will be\nfunction myFunc():string {\n  /**/\n  /**/\n  return void 0; // void 0 means undefined\n}\n</code></pre> <p>+ Code only for NodeJS/backend:</p> <p><code>//#region @backend</code></p> <p>/code/</p> <p><code>//#endregion</code></p> <p>+ Same as above, but returns \"undefined\" as result function:</p> <p><code>//#region @backendFunc</code></p> <p>/code/</p> <p><code>//#endregion</code></p> <p>When you should use @backend, @backendFunc: ?</p> <p>-&gt; for deleting code that can't be mocked in websql mode</p> <pre><code>function whatIsMyOs():string {\n  //@backendFunc\n  return os.getName();\n  //#endregion\n}\n\n// in browser there will be\nfunction myFunc():string {\n  /**/\n  /**/\n  return void 0; // void 0 means undefined\n}\n</code></pre> <p>+ Code only for browser:</p> <p><code>//#region @browser</code></p> <p>/code/</p> <p><code>//#endregion</code></p> <p>When you should use @browser ?</p> <p>-&gt; for frontend code that for some reason can't be executed/imported in NodeJS backend</p> <p>+ Code only for websql mode (not available for NodeJs backend):</p> <p><code>//#region @websqlOnly</code> </p> <p>/code/</p> <p><code>//#endregion</code></p> <p>When you should use @websqlOnly ?</p> <p>-&gt; when you are converting NodeJS only backend to websql mode friendly backend</p>"},{"location":"docs/FRAMEWORK/#inline-importsexports-code-removal","title":"Inline imports/exports code removal","text":"<p>Taon lets you exclude from backend(or browser, or websql) code specific imports/exports by  setting special tag at the end of import/export (not above, not below - at the end)</p> <p>When you automatically orders your imports/export with prettier/eslint - every tag is being preserved.  Taon code <pre><code>import {\n  Taon,\n  Connection,\n} from 'taon/src';\nimport fse from 'fs-extra'; // @backend\nimport {\n  tap,\n  filter,\n} from 'rxjs'; // @browser\n\nimport { User } from './user';\n</code></pre> backend <pre><code>import {\n  Taon,\n  Connection,\n} from 'taon/src';\nimport fse from 'fs-extra'; // @backend\n/* */\n/* */\n/* */\n/* */\n\nimport { User } from './user';\n</code></pre> browser <pre><code>import {\n  Taon,\n  Connection,\n} from 'taon/src';\n/* */\nimport {\n  tap,\n  filter,\n} from 'rxjs'; // @browser\n\nimport { User } from './user';\n</code></pre></p>"},{"location":"docs/FRAMEWORK/#taon-typescript-building-blocks","title":"Taon TypeScript building blocks","text":"<p>Taon powerful class based api let you build app with robust approach.</p> <p>Each building block (Context, Entity, Controller, Subscriber, Migration, Repository, Provider) works well with inheritance and allows you to achieve the highest possible  level of abstraction.</p>"},{"location":"docs/FRAMEWORK/#taon-context","title":"Taon context","text":"<p>Purpose of taon context:</p> <ul> <li>aggregate all (backend + frontend bridge) building blocks</li> <li>start UDP/TCP server    (multiple contexts === multiple servers in 1 NodeJs app)</li> <li>initialization of database (only 1 db per context allowed)</li> </ul> <pre><code>import { Taon, BaseContext } from 'taon/src';\n\nconst MainContext = Taon.createContext(() =&gt; ({\n  host,\n  disabledRealtime: true,\n  contextName: 'MainContext',\n  contexts: { BaseContext },\n  controllers: {\n    UserController,\n  },\n  entities: {\n    User,\n  },\n  // ...also migrations, repositories, providers, subscribers etc. here\n  database: true,\n  logs: true,\n}));\n\nasync function start() {\n  await MainContext.initialize(); // you have to initialize you config before using\n //... \n}\n\nconst BiggerBackendContext = Taon.createContext(() =&gt; ({\n  host: secondHost,\n  disabledRealtime: false,\n  contexts: { \n    BaseContext,\n    MainContext, // EVERYTHING inherited from MainContext\n  },\n  // ...also migrations, repositories, providers, subscribers etc. here\n  database: true,\n  logs: true,\n}));\n</code></pre>"},{"location":"docs/FRAMEWORK/#taon-entities","title":"Taon entities","text":"<p>Entity class that can be use as Dto. Based no https://typeorm.io/entities</p> <pre><code>@Taon.Entity({ className: 'User' })\nclass User extends Taon.Base.AbstractEntity {\n  //#region @websql\n  @Taon.Orm.Column.String()\n  //#endregion\n  name?: string;\n}\n</code></pre>"},{"location":"docs/FRAMEWORK/#taon-controller","title":"Taon controller","text":"<p>Injectable to angular's api service - glue/bridge between backend and frontend.</p> <pre><code>@Taon.Controller({ className: 'UserController' })\nclass UserController extends Taon.Base.CrudController&lt;User&gt; {\n  entityClassResolveFn = () =&gt; User; // crud controller for quick entity rest api\n\n  @Taon.Http.GET() // acessible on in browser code\n  whatTimeIsIt(): Taon.Response&lt;string&gt; {\n    return async () =&gt; {\n      return new Date().toString();\n    };\n  }\n\n  //#region @websql\n  async initExampleDbData(): Promise&lt;void&gt; {\n    const superAdmin = new User();\n    superAdmin.name = 'super-admin';\n    await this.db.save(superAdmin);\n  }\n  //#endregion\n}\n\n// # and later inside Angular code\n\n@Injectable({\n  providedIn:'root'\n})\nexport class UserApiService {\n  userControlller = Taon.inject(()=&gt; MainContext.getClass(UserController))\n\n  getAll() { // observables api\n    return this.userControlller.getAll()\n      .received\n      .observable\n      .pipe(map(r =&gt; r.body.json));\n  }\n\n  async getTime() { // proimses api\n    const data = await this.userControlller.whatTimeIsIt().received;\n    return data.body.text;\n  }\n}\n</code></pre>"},{"location":"docs/FRAMEWORK/#taon-repositories","title":"Taon repositories","text":"<p>Injectable (service like) classes for backend db communication (similar to https://typeorm.io/custom-repository). </p> <p>Repositories are not accessible inside browser.</p> <pre><code>@Taon.Repository({\n  className: 'UserRepository',\n}) \nexport class UserRepository extends Taon.Base.Repository&lt;User&gt; {\n  entityClassResolveFn = () =&gt; User;\n  amCustomRepository = 'testingisnoin';\n  async findByEmail(email: string) {\n    //#region @websqlFunc\n    return this.repo.findOne({ where: { email } });\n    //#endregion\n  }\n}\n</code></pre>"},{"location":"docs/FRAMEWORK/#taon-subscribers","title":"Taon subscribers","text":"<p>Injectable classes for subscribing to entity events base on https://typeorm.io/listeners-and-subscribers</p> <p>Subscribers are not accessible inside browser.</p> <pre><code>@Taon.Subscriber({\n  className: 'TaonSubscriber',\n})\nexport class TaonSubscriber extends Taon.Base.SubscriberForEntity {\n  listenTo() {\n    return MainContext.getClass(UserEntity);\n  }\n\n  afterInsert(entity: any) {\n    console.log(`AFTER INSERT: `, entity);\n    MainContext.realtime.server.triggerEntityTableChanges(UserEntity);\n  }\n}\n</code></pre>"},{"location":"docs/FRAMEWORK/#taon-providers","title":"Taon providers","text":"<p>Injectable (service like) classes singleton classes.</p> <p>Providers are not accessible inside browser.</p> <pre><code>@Taon.Provider({\n  className: 'TaonConfigProvier',\n})\nexport class TaonConfigProvier extends Taon.Base.Provider {\n  config = {\n    lang: 'en',\n    country: 'Poland'\n  }\n}\n</code></pre>"},{"location":"docs/FRAMEWORK/#taon-migrations","title":"Taon migrations","text":"<p>Auto generated migration class files for convenient CI/CD. Work with normal NodeJs backend and Websql browser backend.</p> <pre><code>@Taon.Migration({\n  className: 'MainContext_1735315075962_firstMigration',\n})\nexport class MainContext_1735315075962_firstMigration extends Taon.Base\n  .Migration {\n  async up(queryRunner: QueryRunner): Promise&lt;any&gt; {\n    // do \"something\" in db\n  }\n\n  async down(queryRunner: QueryRunner): Promise&lt;any&gt; {\n    // revert this \"something\" in db\n  }\n}\n</code></pre>"},{"location":"docs/FRAMEWORK/#realtime-communication","title":"Realtime communication","text":"<p>Depending on where you use you backend/frontend - taon framework uses different mechanism for realtime communication:</p> <ul> <li>normal NodeJs backend =&gt; UDP socket communication based on socket.io</li> <li>electron backend =&gt; IPC for realtime communication</li> <li>websql browser backend =&gt; mock of realtime communication based on RxJS library</li> </ul> <p>You can listen/subscribe to custom events or entities events in every simple fashion.</p> <pre><code>@Taon.Subscriber({\n  className: 'RealtimeClassSubscriber',\n})\nexport class RealtimeClassSubscriber extends Taon.Base.SubscriberForEntity {\n  listenTo() {\n    return MainContext.getClass(UserEntity);\n  }\n\n  afterInsert(entity: any) {\n    console.log(`AFTER INSERT: `, entity);\n    MainContext.realtime.server.triggerEntityTableChanges(UserEntity);\n  }\n}\n\n// listen change on backend\nasync function start() {\n MainContext.realtime.server\n  .listenChangesCustomEvent(saveNewUserEventKey)\n  .subscribe(async () =&gt; {\n    console.log('save new user event');\n    await realtimeUserController.saveNewUser();\n  });\n}\n\n  // listen changes on frontend\nexport class RealtimeClassSubscriberComponent {  \n  ngOnInit(): void {\n    console.log('realtime client subscribers start listening!');\n\n    MainContext.realtime.client\n      .listenChangesEntityTable(UserEntity)\n      .pipe(untilDestroyed(this), debounceTime(1000))\n      .subscribe(message =&gt; {\n        console.log('realtime message from class subscriber ', message);\n      });\n  }\n}\n</code></pre>"},{"location":"docs/SQL-BEST-PRACTISES/","title":"SQL - best practices","text":""},{"location":"docs/SQL-BEST-PRACTISES/#end-transactions-in-proper-way","title":"End transactions in proper way","text":"<p>let say we have migration started: <pre><code>await queryRunner.startTransaction();\n</code></pre> to end transaction: <pre><code>await queryRunner.release();  // IT IS NOT ENOUGH\n                        // and this may cause weird errors\n\n// proper 'end' of transaction\nawait queryRunner.commitTransaction();\nawait queryRunner.release();\n</code></pre></p>"},{"location":"docs/SQL-BEST-PRACTISES/#use-current_timestamp-instead-now","title":"Use CURRENT_TIMESTAMP instead NOW()","text":""},{"location":"docs/SQL-BEST-PRACTISES/#use-integer-instead-int","title":"Use integer instead int","text":"<p>sqlite does not support it</p>"},{"location":"docs/VIDEOS/","title":"Official videos:","text":"<ol> <li>Why taon ?</li> <li>Standalone npm/github pages libs/apps</li> <li>Organization npm/github pages libs/apps</li> <li>Handling git repos like a boss</li> </ol>"},{"location":"docs/VIDEOS/#additional-videos","title":"Additional videos","text":"<ul> <li>Windows 11 exactly like MacOS</li> <li>Super speed development across Windows11/MacOS/Linux  (super productive: shortcures, virtual dekstops, expose, alt-tab, snapping)</li> </ul>"},{"location":"local_release/vscode-plugin/taon-latest/","title":"Installation","text":"<p>Right click on the file taon-19.0.6.vsix and select \"Install Extension VSIX\" to install it in your local VSCode instance.</p>"},{"location":"src/lib/lib-info/","title":"Lib info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p> <p>This folder is an entry point for npm Angular/NodeJS library</p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"src/migrations/migrations-info/","title":"Migrations info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p> <p>This folder is only for storing migration files with auto-generated names.</p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"src/tests/mocha-tests-info/","title":"Mocha tests info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"src/tests/mocha-tests-info/#purpose-of-this-folder","title":"Purpose of this folder","text":"<p>Put your backend mocha tests (with .test.ts extension) in this folder or any other tests* folder inside project.</p> <pre><code>/src/lib/my-feature/features.test.ts                          # -&gt; NOT ok, test omitted\n/src/lib/my-feature/tests/features.test.ts                    # -&gt; OK\n/src/lib/my-feature/nested-feature/tests/features.test.ts     # -&gt; OK\n</code></pre>"},{"location":"src/tests/mocha-tests-info/#how-to-test-your-isomorphic-backend","title":"How to test your isomorphic backend ?","text":"<ol> <li> <p>By using console select menu: <pre><code>taon test                   # single run\ntaon test:watch             # watch mode\ntaon test:debug             # and start \"attach\" VSCode debugger\ntaon test:watch:debug       # and start \"attach\" VSCode debugger\n</code></pre></p> </li> <li> <p>Directly: <pre><code>taon mocha                        # single run\ntaon mocha:watch                  # watch mode\ntaon mocha:debug                  # and start \"attach\" VSCode debugger\ntaon mocha:watch:debug            # and start \"attach\" VSCode debugger\n</code></pre></p> </li> </ol>"},{"location":"src/tests/mocha-tests-info/#example","title":"Example","text":"<p>example.test.ts <pre><code>import { describe, before, it } from 'mocha'\nimport { expect } from 'chai';\n\ndescribe('Set name for function or class', () =&gt; {\n\n  it('should keep normal function name ', () =&gt; {\n    expect(1).to.be.eq(Number(1));\n  })\n});\n</code></pre></p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/","title":"tnp -&gt; CLI part of taon framework","text":""},{"location":"tnp/#purpose-of-this-project","title":"Purpose of this project","text":"<ul> <li>this project is a core part of https://github.com/darekf77/taon</li> <li>local development of taon</li> </ul> <p>(tnp means \"typescript-npm-project\" - old name of taon framework)</p> <p>Check taon on https://taon.dev</p>"},{"location":"tnp/ALL_COMMANDS/","title":"ALL COMMANDS","text":""},{"location":"tnp/ALL_COMMANDS/#create-new-project","title":"Create new project","text":"<pre><code># create single standalone project\ntnp new my-standalone-project\n\n# create container with on standalone project\ntnp new my-projects-container/my-project\n\n# create folder/container my-container-org and mark it as organization\ntnp new @my-container-org/my-project\n</code></pre>"},{"location":"tnp/ALL_COMMANDS/#build-release-artifacts","title":"Build &amp; Release artifacts","text":"<p>Supported artifacts by tnp cli:</p> <ul> <li>npm lib (entrypoint ./src/lib/index.ts)</li> <li>cli tool (entrypoint ./src/cli.ts)</li> <li>fe/be angular/node app  (entrypoint ./src/app.ts)</li> <li>electron app  (entrypoint ./src/app.electron.ts)</li> <li>vscode plugin (entrypoint ./src/app.vscode.ts)</li> <li>mobile cordova app (entrypoint ./src/app.mobile.ts)</li> <li>docs (mkdocs, storybook, compodoc) **/*.md, **/*.story.ts</li> </ul>"},{"location":"tnp/ALL_COMMANDS/#build-process","title":"Build process","text":"<p>Single easy to remember build command</p> <pre><code>tnp build:lib # \"ng build\"  form npm lib and whole /src\ntnp bl\n\ntnp build:watch:lib # \"ng build --watch\"  form npm lib and whole /src\ntnp bwl\n\n# REMEMBER: lib build command but be executed before each app/electron build\n\ntnp build:watch:app # \"ng serve\" for website apps\ntnp bwa\n\ntnp build:watch:electron # \"ng serve\" for electron apps\ntnp bwe\n</code></pre>"},{"location":"tnp/ALL_COMMANDS/#scenario-1-developing-websitenpm-library","title":"Scenario 1: developing website/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> second terminal (wait for this command until lib build finish) <pre><code>taon build:watch:app # or taon bwa\n</code></pre></p>"},{"location":"tnp/ALL_COMMANDS/#scenario-2-developing-electron-appnpm-library","title":"Scenario 2: developing electron app/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> second terminal (wait for this command until lib build finish) <pre><code>taon build:watch:electron # or taon bwe\n</code></pre></p>"},{"location":"tnp/ALL_COMMANDS/#scenario-3-developing-vscode-extensionnpm-library","title":"Scenario 3: developing vscode extension/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> Each start of VSCode debugger recreates menu options </p>"},{"location":"tnp/ALL_COMMANDS/#release-process","title":"Release process","text":"<p>Single easy to remember release command</p> <pre><code># show release menu\ntnp release\ntnp r\n\n# release all stuff from taon.jsonc autoReleaseConfigAllowedItems\ntnp auto:release\ntnp ar\n</code></pre>"},{"location":"tnp/ALL_COMMANDS/#link-project-or-bundle","title":"Link project or bundle","text":"<p>Similar command to npm link for tnp projects <pre><code># - link local lib/cli development build as global cli tool\n# - link local repo cli as global cli tools\ntnp link\n</code></pre></p>"},{"location":"tnp/ALL_COMMANDS/#migrations-for-databases","title":"Migrations (for databases)","text":"<pre><code>tnp migration # migration menu\ntnp m\n\n# create migration file (with classes for all detected contexts)\ntnp migration:create \ntnp mc\n\n # run all migrations (for all contexts)\ntnp migration:run   # similar to 'tnp run', but won't start express\ntnp mr              # server and it will stop after contexts\n                    # initialize() functions...\n\n # revert migration to timestamp\ntnp migration:revert timestamp  # similar to 'tnp run', but won't start express\ntnp mr timestamp                # server and it will stop after contexts\n                                # initialize() functions...\n</code></pre>"},{"location":"tnp/ALL_COMMANDS/#testing","title":"Testing","text":"<pre><code># Unit/Integration tests (jest)\ntnp test\ntnp t\n\ntnp test:watch\ntnp tw\n\n# recreate jest snapshots\ntnp test:up:snapshots\ntnp tu\n\n# E2e testing (playwright)\ntnp e2e\ntnp e2e:watch\n</code></pre>"},{"location":"tnp/ALL_COMMANDS/#git","title":"Git","text":""},{"location":"tnp/ALL_COMMANDS/#handy-shortcuts","title":"Handy shortcuts","text":"<p><code>tnp soft</code>  =&gt; <code>git reset --soft HEAD~1</code></p> <p><code>tnp hosts</code>  =&gt; open hosts files in VSCode</p> <p><code>tnp count:commits</code>  =&gt; show origin of project</p> <p><code>tnp remove:submodules</code>  =&gt; remove all submodules from repo</p> <p><code>tnp remove:submodule my-not-wanted-git-submodules</code>  =&gt; remove submodule by folder name</p> <p><code>tnp remove:tag git-tag-name-optionally</code> =&gt; remove git tag (if not provided name - select menu appears)</p> <p><code>tnp last:tag</code> =&gt; display info aboutlast tag</p>"},{"location":"tnp/ALL_COMMANDS/#remotes","title":"Remotes","text":"<p><code>tnp origin</code>  =&gt; show origin of project</p> <p><code>tnp remote</code>  =&gt; <code>tnp origin</code> </p> <p><code>tnp origins</code>  =&gt; show all origins of project</p> <p><code>tnp remotes</code>  =&gt; <code>tnp origins</code></p> <p><code>tnp rename:origin http://my-new-origin</code>  =&gt; replaces default origin new provided</p> <p><code>tnp set:origin http://my-new-origin</code>  =&gt; alias to rename:origin</p> <p><code>tnp set:remote:ssh</code>  =&gt; changes http remote to ssh remote</p> <p><code>tnp set:remote:http</code>  =&gt; changes ssh remote to https remote</p>"},{"location":"tnp/ALL_COMMANDS/#rebase","title":"Rebase","text":"<p><code>tnp rebase</code>  =&gt; rebase current branch with default branch</p> <p><code>tnp rebase branch-to-rebase</code>  =&gt; rebase current branch with changes from branch-to-rebase</p>"},{"location":"tnp/ALL_COMMANDS/#stash","title":"Stash","text":"<p><code>tnp stash</code>  =&gt; stash only staged files</p> <p><code>tnp stashall</code>  =&gt; stash all files</p>"},{"location":"tnp/ALL_COMMANDS/#reset-change-branch","title":"Reset + change branch","text":"<p><code>tnp branch</code>  =&gt; git fetch / display menu with branches to select / select branch</p> <p><code>tnp reset</code>  =&gt; <code>git fetch</code> + remove tmp files for project + <code>tnp branch</code> (include children)</p> <p><code>tnp reset my-branch</code>  =&gt; same as <code>tnp reset</code> but specific branch</p> <p><code>tnp reset</code>  =&gt; reset hard and pull (recrusively)</p>"},{"location":"tnp/ALL_COMMANDS/#pull","title":"Pull","text":"<p><code>tnp pull</code>  =&gt; pull current branch or current workspace projects one after another</p> <p><code>tnp repull</code>  =&gt; <code>git reset hard --HEAD~10</code> + <code>tnp pull</code></p>"},{"location":"tnp/ALL_COMMANDS/#push","title":"Push","text":"<p><code>tnp pushall</code> =&gt; push code to all remotes(origins) defined in .git/config</p> <p><code>tnp pall</code> =&gt; <code>tnp pushall</code></p> <p><code>tnp push</code>  =&gt; (optionally git add +)  commit with message based on branch name + push current branch</p>"},{"location":"tnp/ALL_COMMANDS/#smart-conventional-commits-branching","title":"Smart Conventional Commits Branching","text":"<p>Checkout branch + add changes + commit message + push branch</p> <p>Create special branches (with metadata inside name) that can be use later with command <code>tnp push</code> to \"re-push\" changes and use matadata from branch name   as commit message.</p>"},{"location":"tnp/ALL_COMMANDS/#fix","title":"fix","text":"<p>Quick commit and push bugfix <code>tnp pfix JIRA-379089 JIRA-380320 proper counter message [my-lib]</code>   &lt;=&gt; <code>git checkout -b bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code> +  <code>git add</code> +  <code>git commit -m \"fix(my-lib): proper counter message JIRA-379089 JIRA-380320\"</code> +  <code>git push origin bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code></p> <p>tnp pfix &lt;=&gt; tnp pushfix &lt;=&gt; tnp push:fix</p>"},{"location":"tnp/ALL_COMMANDS/#feature","title":"feature","text":"<p>Quick commit and push feature <code>tnp pf JIRA-379089 JIRA-380320 admin notification [my-lib]</code>  &lt;&gt;=&gt; <code>git checkout -b feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code> +  <code>git add</code> +  <code>git commit -m \"feat(my-lib): admin notification JIRA-379089 JIRA-380320\"</code> +  <code>git push origin feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code></p> <p>tnp pf &lt;=&gt; tnp pushfeature &lt;=&gt; tnp push:feature</p>"},{"location":"tnp/ALL_COMMANDS/#chore","title":"chore","text":"<p>Quick commit and push chore  <code>tnp pc JIRA-379089 update deps</code> &lt;=&gt;   <code>git checkout -b chore/JIRA-379089-update-deps</code> +  <code>git add</code> +  <code>git commit -m \"chore: update deps JIRA-379089\"</code> +  <code>git push origin  chore/JIRA-379089-update-deps</code></p> <p>tnp pc &lt;=&gt; tnp chore &lt;=&gt; tnp pchore</p>"},{"location":"tnp/ALL_COMMANDS/#docs","title":"docs","text":"<p>Quick commit and push docs update  <code>tnp pd explained installation</code>  &lt;=&gt;  <code>git checkout -b docs/explained-installation</code> +  <code>git add</code> +  <code>git commit -m \"docs:explained installation\"</code> +  <code>git push origin docs/explained-installation</code></p> <p>tnp pd &lt;=&gt; tnp pdocs</p>"},{"location":"tnp/ALL_COMMANDS/#test","title":"test","text":"<p>Quick commit and push tests update  <code>tnp ptest admin permission new use case</code>  &lt;=&gt;  <code>git checkout -b test/admin-permission-new-use-case</code> +  <code>git add</code> +  <code>git commit -m \"test: admin permission new use case\"</code> +  <code>git push origin test/admin-permission-new-use-case</code></p> <p>tnp push:test &lt;=&gt; tnp ptest  &lt;=&gt; tnp ptests</p>"},{"location":"tnp/ALL_COMMANDS/#styl","title":"styl","text":"<p>Quick commit and push style update (formatting, linting etc.)  <code>tnp pstyle proper project methods</code>  &lt;=&gt;  <code>git checkout -b style/proper-project-methods</code> +  <code>git add</code> +  <code>git commit -m \"style: proper project methods\"</code> +  <code>git push origin style/proper-project-methods</code></p> <p>tnp pstyl &lt;=&gt; tnp pstyle</p>"},{"location":"tnp/ALL_COMMANDS/#refactor","title":"refactor","text":"<p>Quick commit and push code refactor  <code>tnp pref new permission module</code>  &lt;=&gt;  <code>git checkout -b refactor/new-permission-module</code> +  <code>git add</code> +  <code>git commit -m \"refactor: new permission module\"</code> +  <code>git push origin refactor/new-permission-module</code></p> <p>tnp pref &lt;=&gt; tnp prefactor</p>"},{"location":"tnp/ALL_COMMANDS/#release","title":"release","text":"<p>Quick commit and push release commit  <code>tnp prelease</code>  &lt;=&gt;  <code>git checkout -b release/version-v1-2-3</code> +  <code>git add</code> +  <code>git commit -m \"release: version v1.2.3\"</code> +  <code>git push origin release/version-1-2-3</code></p> <p>tnp prel &lt;=&gt; tnp prelase</p>"},{"location":"tnp/BUILD-INFO/","title":"CURRENT BUILD INFO","text":""},{"location":"tnp/BUILD-INFO/#normal-app-frontend","title":"NORMAL APP FRONTEND:","text":"<p>http://localhost:4201</p> <ul> <li>normal app node backend: http://localhost:4101</li> </ul>"},{"location":"tnp/BUILD-INFO/#websql-app-backendfrontend","title":"WEBSQL APP BACKEND/FRONTEND:","text":"<p>http://localhost:4202</p>"},{"location":"tnp/CI-CD/","title":"CI/CD","text":"<p>Taon aside migrations - supports 4 types of release:  + Manual  + Cloud  + Local/Repo  + Static Pages</p> <p>than can be used to achieve proper CI/CD ( Continuous Integration (CI) and Continuous Delivery (CD) ).  Depending on initial state of project:</p> <ul> <li>number of developers</li> <li>size of codebase</li> <li>security level </li> </ul> <p>..each release type may suit you better than the others.</p> <p>\u2705 - DONE   \u231b - IN PROGRESS  \ud83e\udd14 - MAYBE TODO</p> <p>\ud83d\udca1 - Possible purpose </p> <p>Taon cli support following release artifacts:</p> <p>\u2b50 npm lib and cli tool  - Shared npm library with global cli tool.  The library code is shared across all other artifacts except docs webapp.</p> <p>\u2b50 angular node app  - Backend/frontend NodeJs/Angular app shared across  artifacts (In websql mode -&gt; there is only frontend with backend inside browser).</p> <p>\u2b50 vscode plugin  - Visual Studio Code extension/plugin with backend from npm lib and cli tool</p> <p>\u2b50 electron app    - Electron app with angular node app as frontend/backend (IPC or UDP/TCP)</p> <p>\u2b50 mobile app   - Ionic framework based mobile app with angular node app as frontend/backend.</p> <p>\u2b50 docs webapp   - Combined documentation: MkDocs + Compodoc  + Storybook .</p>"},{"location":"tnp/CI-CD/#manual-release","title":"Manual Release","text":"<p>\ud83d\ude80 Purpose: release artifacts using cli on development machine</p> <p>\ud83d\ude80 Purpose: A convenient way to check if the Cloud Release will work.</p> <p>\ud83d\ude80 This release creates a config that is used later in the Cloud Release.</p> Artifact name Manual npm lib and cli tool(manual)         \u231b - publish as normal package (project name as npm name)        \u231b - publish as organization package (container name as org. name)        \u231b - handle public/private npm (login if needed), use .npmrc        \u231b - build option: publish only cli without lib code        \ud83e\udd14 - build option: minify/obscure library code file by file         \u231b - build option: (single one file) minify/obscure whole library/cli angular node app(manual)       \u231b - build docker with router for NodeJs backend and Angular frontend      \u231b - docker can be use with any docker management system     \u231b - taon cloud handle start/stop/update/deployment of dockers/apps     \u231b - release docs webapp to github_pages special branch:  vscode plugin(manual)       \u231b - publish to azure when azure cloud cli available       \u231b - publish special website assets as new release  electron app(manual)       \u231b - publish to store (ms store, mac app store, snap, flatpak)        \u231b - publish special website assets as new release  mobile app(manual)      \u231b - publish to app store (play, app store, app gallery)       \u231b - publish special website assets as new release  docs webapp(manual)      \u231b - publish special website assets documentation as new release      \u231b - release docs webapp to github_pages special branch:"},{"location":"tnp/CI-CD/#cloud-release","title":"Cloud Release","text":"<p>\ud83d\ude80 Trigger release on remote (or localhost) Taon Cloud instance</p> <p>\ud83d\ude80 Cloud Release actually uses Manual Release with config on remote (or localhost) Taon Cloud </p> Artifact name Cloud npm lib and cli tool(cloud)         \u231b - trigger remote npm lib/cli publish        \u231b - trigger remote npm libraries chain publish  angular node app(cloud)       \u231b - trigger remote build based on config     \u231b - release is bumping versions and deploying to servers     \u231b - release and deployment is a same thing here      vscode plugin(cloud)       \u231b - trigger remote build/publish to azure       \u231b - trigger remote build/publish to special assets server  electron app(cloud)       \u231b - trigger remote build/publish/deploy to application stores mobile app(cloud)       \u231b - trigger remote build/publish/deploy to application stores docs webapp(cloud)       \u231b - trigger remote build/publish/deploy to remote server website assets"},{"location":"tnp/CI-CD/#localrepo-release","title":"Local/Repo Release","text":"<p>\ud83d\ude80 All released artifacts stored inside project repository</p> <p>\ud83d\ude80 Perfect if you are starting project alone and you need  to somehow show your work/progress</p> Artifact name Local/Repo npm lib and cli tool(local/repo)        \ud83d\udca1 Fully ready cli quickly globally linked in system (npm link)      \u231b  - release lib and cli into: repo-folder/local_release/npm-lib-and-cli-tool/project-name angular node app(local/repo)      \ud83d\udca1 Easy way to check if our deployment system is operational     \ud83d\udd32  - release docker images (dockers backend, frontend, routers etc.) to  repo-folder/local_release/angular-node-app/project-name vscode plugin(local/repo)      \ud83d\udca1 Installable *.vsix VSCode extension for dev-s local development.     \ud83d\udd32  - release *.vsix plugin file into:  repo-folder/local_release/vscode-plugin/project-name electron app(local/repo)      \ud83d\udca1 App needed for local development/projects management     \ud83d\udd32  - release app installer (or executable) into:  repo-folder/local_release/electron-app/(win/mac/linux)/project-name mobile app(local/repo)      \ud83d\udca1 Mobile app needed for local development/testing     \ud83d\udd32  - release .apk, .ipa app into:  repo-folder/local_release/mobile-app/(win/mac/linux)/project-name docs webapp(local/repo)      \ud83d\udca1 Docs of application inside repo instead online     \ud83d\udd32  - release docs webapp into:  repo-folder/local_release/docs-webapp/(win/mac/linux)/project-name"},{"location":"tnp/CI-CD/#static-pages-release","title":"Static Pages Release","text":"<p>Take advantage of github pages (or similar solution) in a best possible way.</p> <p>\ud83d\ude80 Purpose: release any compiled/bundled artifact to static pages  (free Github Pages)</p> <p>\ud83d\ude80 Purpose: A convenient way to store artifacts with with versions</p> <p>\ud83d\ude80 Perfect for storing open source apps/libs/docs</p> Artifact name Static Pages npm lib and cli tool(static-pages)         \u231b - publish zipped (also with source code) library/cli to  static_pages_branch/assets/npm-lib-and-cli-tool/version-X-X-X        \u231b - additionally bundled script for cli installation   angular node app(static-pages)       \u231b -  publish angular app with WEBSQL backend to  static_pages_branch vscode plugin(static-pages)       \u231b - publish zipped (also with source code) vscode plugin to  static_pages_branch/assets/vscode-plugin/version-X-X-X/ electron app(static-pages)       \u231b - publish zipped (also with source code) electron app installer to  static_pages_branch/assets/electron-app/version-X-X-X mobile app(static-pages)      \u231b - publish zipped (also with source code) mobile app installer to  static_pages_branch/assets/mobile-app/version-X-X-X docs webapp(static-pages)      \u231b - publish documentation to static_pages_branch/documentation"},{"location":"tnp/TODO/","title":"TODO","text":"<p>\ud83d\udd32 all build have proper ports assignation from single source</p>"},{"location":"tnp/tnp-helpers__git-commands/","title":"Git","text":""},{"location":"tnp/tnp-helpers__git-commands/#handy-shortcuts","title":"Handy shortcuts","text":"<p><code>tnp soft</code>  =&gt; <code>git reset --soft HEAD~1</code></p> <p><code>tnp hosts</code>  =&gt; open hosts files in VSCode</p> <p><code>tnp count:commits</code>  =&gt; show origin of project</p> <p><code>tnp remove:submodules</code>  =&gt; remove all submodules from repo</p> <p><code>tnp remove:submodule my-not-wanted-git-submodules</code>  =&gt; remove submodule by folder name</p> <p><code>tnp remove:tag git-tag-name-optionally</code> =&gt; remove git tag (if not provided name - select menu appears)</p> <p><code>tnp last:tag</code> =&gt; display info aboutlast tag</p>"},{"location":"tnp/tnp-helpers__git-commands/#remotes","title":"Remotes","text":"<p><code>tnp origin</code>  =&gt; show origin of project</p> <p><code>tnp remote</code>  =&gt; <code>tnp origin</code> </p> <p><code>tnp origins</code>  =&gt; show all origins of project</p> <p><code>tnp remotes</code>  =&gt; <code>tnp origins</code></p> <p><code>tnp rename:origin http://my-new-origin</code>  =&gt; replaces default origin new provided</p> <p><code>tnp set:origin http://my-new-origin</code>  =&gt; alias to rename:origin</p> <p><code>tnp set:remote:ssh</code>  =&gt; changes http remote to ssh remote</p> <p><code>tnp set:remote:http</code>  =&gt; changes ssh remote to https remote</p>"},{"location":"tnp/tnp-helpers__git-commands/#rebase","title":"Rebase","text":"<p><code>tnp rebase</code>  =&gt; rebase current branch with default branch</p> <p><code>tnp rebase branch-to-rebase</code>  =&gt; rebase current branch with changes from branch-to-rebase</p>"},{"location":"tnp/tnp-helpers__git-commands/#stash","title":"Stash","text":"<p><code>tnp stash</code>  =&gt; stash only staged files</p> <p><code>tnp stashall</code>  =&gt; stash all files</p>"},{"location":"tnp/tnp-helpers__git-commands/#reset-change-branch","title":"Reset + change branch","text":"<p><code>tnp branch</code>  =&gt; git fetch / display menu with branches to select / select branch</p> <p><code>tnp reset</code>  =&gt; <code>git fetch</code> + remove tmp files for project + <code>tnp branch</code> (include children)</p> <p><code>tnp reset my-branch</code>  =&gt; same as <code>tnp reset</code> but specific branch</p> <p><code>tnp reset</code>  =&gt; reset hard and pull (recrusively)</p>"},{"location":"tnp/tnp-helpers__git-commands/#pull","title":"Pull","text":"<p><code>tnp pull</code>  =&gt; pull current branch or current workspace projects one after another</p> <p><code>tnp repull</code>  =&gt; <code>git reset hard --HEAD~10</code> + <code>tnp pull</code></p>"},{"location":"tnp/tnp-helpers__git-commands/#push","title":"Push","text":"<p><code>tnp pushall</code> =&gt; push code to all remotes(origins) defined in .git/config</p> <p><code>tnp pall</code> =&gt; <code>tnp pushall</code></p> <p><code>tnp push</code>  =&gt; (optionally git add +)  commit with message based on branch name + push current branch</p>"},{"location":"tnp/tnp-helpers__git-commands/#smart-conventional-commits-branching","title":"Smart Conventional Commits Branching","text":"<p>Checkout branch + add changes + commit message + push branch</p> <p>Create special branches (with metadata inside name) that can be use later with command <code>tnp push</code> to \"re-push\" changes and use matadata from branch name   as commit message.</p>"},{"location":"tnp/tnp-helpers__git-commands/#fix","title":"fix","text":"<p>Quick commit and push bugfix <code>tnp pfix JIRA-379089 JIRA-380320 proper counter message [my-lib]</code>   &lt;=&gt; <code>git checkout -b bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code> +  <code>git add</code> +  <code>git commit -m \"fix(my-lib): proper counter message JIRA-379089 JIRA-380320\"</code> +  <code>git push origin bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code></p> <p>tnp pfix &lt;=&gt; tnp pushfix &lt;=&gt; tnp push:fix</p>"},{"location":"tnp/tnp-helpers__git-commands/#feature","title":"feature","text":"<p>Quick commit and push feature <code>tnp pf JIRA-379089 JIRA-380320 admin notification [my-lib]</code>  &lt;&gt;=&gt; <code>git checkout -b feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code> +  <code>git add</code> +  <code>git commit -m \"feat(my-lib): admin notification JIRA-379089 JIRA-380320\"</code> +  <code>git push origin feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code></p> <p>tnp pf &lt;=&gt; tnp pushfeature &lt;=&gt; tnp push:feature</p>"},{"location":"tnp/tnp-helpers__git-commands/#chore","title":"chore","text":"<p>Quick commit and push chore  <code>tnp pc JIRA-379089 update deps</code> &lt;=&gt;   <code>git checkout -b chore/JIRA-379089-update-deps</code> +  <code>git add</code> +  <code>git commit -m \"chore: update deps JIRA-379089\"</code> +  <code>git push origin  chore/JIRA-379089-update-deps</code></p> <p>tnp pc &lt;=&gt; tnp chore &lt;=&gt; tnp pchore</p>"},{"location":"tnp/tnp-helpers__git-commands/#docs","title":"docs","text":"<p>Quick commit and push docs update  <code>tnp pd explained installation</code>  &lt;=&gt;  <code>git checkout -b docs/explained-installation</code> +  <code>git add</code> +  <code>git commit -m \"docs:explained installation\"</code> +  <code>git push origin docs/explained-installation</code></p> <p>tnp pd &lt;=&gt; tnp pdocs</p>"},{"location":"tnp/tnp-helpers__git-commands/#test","title":"test","text":"<p>Quick commit and push tests update  <code>tnp ptest admin permission new use case</code>  &lt;=&gt;  <code>git checkout -b test/admin-permission-new-use-case</code> +  <code>git add</code> +  <code>git commit -m \"test: admin permission new use case\"</code> +  <code>git push origin test/admin-permission-new-use-case</code></p> <p>tnp push:test &lt;=&gt; tnp ptest  &lt;=&gt; tnp ptests</p>"},{"location":"tnp/tnp-helpers__git-commands/#styl","title":"styl","text":"<p>Quick commit and push style update (formatting, linting etc.)  <code>tnp pstyle proper project methods</code>  &lt;=&gt;  <code>git checkout -b style/proper-project-methods</code> +  <code>git add</code> +  <code>git commit -m \"style: proper project methods\"</code> +  <code>git push origin style/proper-project-methods</code></p> <p>tnp pstyl &lt;=&gt; tnp pstyle</p>"},{"location":"tnp/tnp-helpers__git-commands/#refactor","title":"refactor","text":"<p>Quick commit and push code refactor  <code>tnp pref new permission module</code>  &lt;=&gt;  <code>git checkout -b refactor/new-permission-module</code> +  <code>git add</code> +  <code>git commit -m \"refactor: new permission module\"</code> +  <code>git push origin refactor/new-permission-module</code></p> <p>tnp pref &lt;=&gt; tnp prefactor</p>"},{"location":"tnp/tnp-helpers__git-commands/#release","title":"release","text":"<p>Quick commit and push release commit  <code>tnp prelease</code>  &lt;=&gt;  <code>git checkout -b release/version-v1-2-3</code> +  <code>git add</code> +  <code>git commit -m \"release: version v1.2.3\"</code> +  <code>git push origin release/version-1-2-3</code></p> <p>tnp prel &lt;=&gt; tnp prelase</p>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/","title":"ADDITIONAL COMMANDS","text":""},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#running-nodejs-backend-app","title":"Running nodejs backend app","text":"<p>Usually you don't use this command for development </p> <p>-&gt; debugger from Visual Studio Code is for this  (F5 on keyboard, Task \"Debug/Start Server\").  <pre><code>tnp run\n</code></pre></p>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#tnp-extension-for-visual-studio-code","title":"Tnp extension for Visual Studio Code","text":"<p>Install essential vscode plugins from project workspace recommended</p> <pre><code>tnp vscode:ext\ntnp ext\n</code></pre>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#tnp-global-config-for-visual-studio-code","title":"Tnp global config for Visual Studio Code","text":"<p>Apply best global config for VScode</p> <pre><code>tnp vscode:global\n</code></pre>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#install-mkdocs-manually","title":"Install mkdocs manually","text":"<pre><code>pip3 install mkdocs\npip3 install mkdocs-material --user\n</code></pre> <pre><code>brew install mkdocs\nbrew install mkdocs-material\n</code></pre>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#pause","title":"Pause","text":"<p>Pause terminal test <pre><code>tnp pause\n</code></pre></p>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#github-pages-from-docs-to-branch","title":"Github pages from /docs to branch","text":"<p>Pause terminal test <pre><code>tnp ghPagesInit\ntnp gh:pages:init\ntnp ghpagesinit\ntnp ghPagesInit --full # full process with deleting /docs files\ntnp ghPagesInit --provider bitbucket # specify different provider\n</code></pre></p>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#show-version-of-projects-inside-container","title":"Show version of projects inside container","text":"<pre><code>tnp versions\n</code></pre>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#download-video-as-mp3","title":"Download video as mp3","text":"<p>Download mp3 from url (got to ~/Download/mp3-from-websites)</p> <pre><code>tnp mp3 &lt;url to video&gt;\n</code></pre>"},{"location":"tnp/docs/ADDITIONAL-COMMANDS/#download-video-as-mp4-video","title":"Download video as mp4 video","text":"<p>Download mp4 from url (got to ~/Download/mp4-from-websites)</p> <pre><code>tnp mp4 &lt;url to video&gt;\n</code></pre>"},{"location":"tnp/docs/CI-CD/","title":"CI CD","text":"<p>Taon aside migrations - supports 4 types of release:  + Manual  + Cloud  + Local/Repo  + Static Pages</p> <p>than can be used to achieve proper CI/CD ( Continuous Integration (CI) and Continuous Delivery (CD) ).  Depending on initial state of project:</p> <ul> <li>number of developers</li> <li>size of codebase</li> <li>security level </li> </ul> <p>..each release type may suit you better than the others.</p> <p>\u2705 - DONE   \u231b - IN PROGRESS  \ud83e\udd14 - MAYBE TODO</p> <p>\ud83d\udca1 - Possible purpose </p> <p>Taon cli support following release artifacts:</p> <p>\u2b50 npm lib and cli tool  - Shared npm library with global cli tool.  The library code is shared across all other artifacts except docs webapp.</p> <p>\u2b50 angular node app  - Backend/frontend NodeJs/Angular app shared across  artifacts (In websql mode -&gt; there is only frontend with backend inside browser).</p> <p>\u2b50 vscode plugin  - Visual Studio Code extension/plugin with backend from npm lib and cli tool</p> <p>\u2b50 electron app    - Electron app with angular node app as frontend/backend (IPC or UDP/TCP)</p> <p>\u2b50 mobile app   - Ionic framework based mobile app with angular node app as frontend/backend.</p> <p>\u2b50 docs webapp   - Combined documentation: MkDocs + Compodoc  + Storybook .</p>"},{"location":"tnp/docs/CLOUD-SERVICE/","title":"CLOUD-SERVICE","text":"<p>Taon, out of the box, provides users with a local service for easy project/port/domain management and deployment. It also gives an insight into what the real bare-bones Taon Cloud service feels like. Essentially, Taon Service is the same as Taon Cloud.   By default, each Taon command checks if a working and healthy local Taon service is available. If not, a new terminal console inside the system starts with the Taon user-friendly UI console.</p> <p></p> <p>Taon UI Console \u2013 basically, it\u2019s everything you would ever need for deploying and managing your remote projects through SSH. No need for a browser UI, no distractions, security concerns. </p>"},{"location":"tnp/docs/CLOUD-SERVICE/#behavior-on-server-vs-on-localhost","title":"Behavior - on server vs on localhost","text":"Manager Projects Domains Ports Deployments Environments Localhost discover / monitor / change / deploy / remove your git projects        - manage /etc/host file       - create fake domains for temporary simulation of real service/website             - assign automatically ports to projects when starting local build (no       more --port needed, everything )       - project from same location use the same ports everytime to avoid       confusion        - for: projects, services, dockers             - main place where you can specify quickly what to deploy and where       - deploy projects/artifacts       - deploy groups of projects/artifacts        modify/preview environment assigned for each deployed project artifact      Cloud -||-        - display all domains that are assigned for server public ip       - (in future - deep service integration with providers that will let you       skip learning about redirecting/assigning domains =&gt; just buy/configure       domain from here!)      -||- -||- -||-"},{"location":"tnp/docs/COMMANDS/","title":"COMMANDS","text":""},{"location":"tnp/docs/COMMANDS/#create-new-project","title":"Create new project","text":"<pre><code># create single standalone project\ntnp new my-standalone-project\n\n# create container with on standalone project\ntnp new my-projects-container/my-project\n\n# create folder/container my-container-org and mark it as organization\ntnp new @my-container-org/my-project\n</code></pre>"},{"location":"tnp/docs/COMMANDS/#build-release-artifacts","title":"Build &amp; Release artifacts","text":"<p>Supported artifacts by tnp cli:</p> <ul> <li>npm lib (entrypoint ./src/lib/index.ts)</li> <li>cli tool (entrypoint ./src/cli.ts)</li> <li>fe/be angular/node app  (entrypoint ./src/app.ts)</li> <li>electron app  (entrypoint ./src/app.electron.ts)</li> <li>vscode plugin (entrypoint ./src/app.vscode.ts)</li> <li>mobile cordova app (entrypoint ./src/app.mobile.ts)</li> <li>docs (mkdocs, storybook, compodoc) **/*.md, **/*.story.ts</li> </ul>"},{"location":"tnp/docs/COMMANDS/#build-process","title":"Build process","text":"<p>Single easy to remember build command</p> <pre><code>tnp build:lib # \"ng build\"  form npm lib and whole /src\ntnp bl\n\ntnp build:watch:lib # \"ng build --watch\"  form npm lib and whole /src\ntnp bwl\n\n# REMEMBER: lib build command but be executed before each app/electron build\n\ntnp build:watch:app # \"ng serve\" for website apps\ntnp bwa\n\ntnp build:watch:electron # \"ng serve\" for electron apps\ntnp bwe\n</code></pre>"},{"location":"tnp/docs/COMMANDS/#scenario-1-developing-websitenpm-library","title":"Scenario 1: developing website/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> second terminal (wait for this command until lib build finish) <pre><code>taon build:watch:app # or taon bwa\n</code></pre></p>"},{"location":"tnp/docs/COMMANDS/#scenario-2-developing-electron-appnpm-library","title":"Scenario 2: developing electron app/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> second terminal (wait for this command until lib build finish) <pre><code>taon build:watch:electron # or taon bwe\n</code></pre></p>"},{"location":"tnp/docs/COMMANDS/#scenario-3-developing-vscode-extensionnpm-library","title":"Scenario 3: developing vscode extension/npm library","text":"<p>first terminal <pre><code>taon build:watch:lib # or taon bwl\n</code></pre> Each start of VSCode debugger recreates menu options </p>"},{"location":"tnp/docs/COMMANDS/#release-process","title":"Release process","text":"<p>Single easy to remember release command</p> <pre><code># show release menu\ntnp release\ntnp r\n\n# release all stuff from taon.jsonc autoReleaseConfigAllowedItems\ntnp auto:release\ntnp ar\n</code></pre>"},{"location":"tnp/docs/COMMANDS/#link-project-or-bundle","title":"Link project or bundle","text":"<p>Similar command to npm link for tnp projects <pre><code># - link local lib/cli development build as global cli tool\n# - link local repo cli as global cli tools\ntnp link\n</code></pre></p>"},{"location":"tnp/docs/COMMANDS/#migrations-for-databases","title":"Migrations (for databases)","text":"<pre><code>tnp migration # migration menu\ntnp m\n\n# create migration file (with classes for all detected contexts)\ntnp migration:create \ntnp mc\n\n # run all migrations (for all contexts)\ntnp migration:run   # similar to 'tnp run', but won't start express\ntnp mr              # server and it will stop after contexts\n                    # initialize() functions...\n\n # revert migration to timestamp\ntnp migration:revert timestamp  # similar to 'tnp run', but won't start express\ntnp mr timestamp                # server and it will stop after contexts\n                                # initialize() functions...\n</code></pre>"},{"location":"tnp/docs/COMMANDS/#testing","title":"Testing","text":"<pre><code># Unit/Integration tests (jest)\ntnp test\ntnp t\n\ntnp test:watch\ntnp tw\n\n# recreate jest snapshots\ntnp test:up:snapshots\ntnp tu\n\n# E2e testing (playwright)\ntnp e2e\ntnp e2e:watch\n</code></pre>"},{"location":"tnp/docs/EXAMPLES/","title":"Examples","text":"<p>Isomorphic code in TypeScript offers a range of advantages for full-stack developers. </p> <p>By enabling code reuse on both the client and server sides, it enhances efficiency and ensures consistency.</p>"},{"location":"tnp/docs/EXAMPLES/#1-no-separation-between-backend-and-frontend-code","title":"1. No separation between backend and frontend code","text":"<ul> <li>Use backend entities as frontend DTOs!</li> <li>This is a dream situation for many developers!</li> <li>A perfect solution for all types of projects (hobbyists, freelancers, enterprises).</li> <li>CRAZY FAST business changes across database tables and frontend Angular templates \u2014 CHECK!</li> <li>Frontend, backend, and database code refactored simultaneously!</li> </ul> <p>user.entity.ts <pre><code>import { Taon } from 'taon';\n\n@Taon.Entity()\nclass User extends Taon.Entity {\n  //#region @backend\n  @Taon.Orm.Column.Generated()\n  //#endregion\n  id: string;\n}\n</code></pre></p> <p>your browser will get code below: <pre><code>import { Taon } from 'taon/browser';\n\n@Taon.Entity()\nclass User extends Taon.Entity {\n  /* */\n  /* */\n  /* */\n  id: string;\n}\n</code></pre></p> <p>..same thing applies in reverse to browser code</p> <p>common.service.ts</p> <pre><code>import { Taon } from 'taon';\n//@region @browser\nimport { Injectable } from '@angular/core';\n//#endregion\n\n//@region @browser\n@Injectable()\n//#endregion \nclass CommonService { \n  helloWorld() { \n    console.log('Hello on backend and frontend')\n  }\n}\n</code></pre> <p>your backend will get code below: <pre><code>import { Taon } from 'taon';\n/* */\n/* */\n/* */\n\n/* */\n/* */\n/* */\nclass CommonService {\n  helloWorld() { \n    console.log('Hello on backend and frontend')\n  }\n}\n</code></pre></p>"},{"location":"tnp/docs/EXAMPLES/#2-websql-mode-for-writing-backend-in-browser","title":"2. Websql Mode for writing backend in browser!","text":"<ul> <li>Instead of running a local server, run everything (db, backend) in the browser thanks to sql.js/typeorm!</li> <li>This is possible ONLY in Taon, with the highest possible abstraction concepts.</li> </ul> <p>user.entity.ts</p> <pre><code>import { Taon } from 'taon';\n\n@Taon.Entity()\nclass User {\n  //#region @websql\n  @Taon.Orm.Column.Generated()\n  //#endregion\n  id: string;\n}\n</code></pre> <p>your browser in WEBSQL mode will get code below: <pre><code>import { Taon } from 'taon/websql';\n\n@Taon.Entity()\nclass User {\n //#region @websql\n  @Taon.Orm.Column.Generated()\n  //#endregion\n  id: string;\n}\n</code></pre></p> <p>your browser in NORMAL NodeJS mode will get code below: <pre><code>import { Taon } from 'taon/websql';\n\n@Taon.Entity()\nclass User {\n  /* */\n  /* */\n  /* */\n  id: string;\n}\n</code></pre> Database columns can be created in browser/frontend with sql.js !</p>"},{"location":"tnp/docs/EXAMPLES/#3-create-befe-crud-rest-api-in-a-blink-of-the-eye","title":"3. Create BE/FE CRUD REST API in a blink of the eye...","text":"<ul> <li> <p>Define the host only once for both backend and frontend!</p> </li> <li> <p>No more ugly access to the server... Taon takes it to the next level!</p> </li> <li> <p>In an Angular/RxJS environment, it\u2019s more than the perfect solution!</p> </li> </ul> <p>user.controller.ts <pre><code>@Taon.Controller({ className: 'UserController' })\nclass UserController extends Taon.Base.CrudController&lt;User&gt; {\n  entityClassResolveFn = ()=&gt; User;\n  //#region @websql\n  async initExampleDbData(): Promise&lt;void&gt; {\n    const superAdmin = new User();\n    superAdmin.name = 'super-admin';\n    await this.db.save(superAdmin);\n  }\n  //#endregion\n}\n</code></pre></p> <p>user-api.service.ts <pre><code>@Injectable({\n  providedIn: 'root',\n})\nexport class UserApiService {\n  userController = Taon.inject(\n    () =&gt; UserContext.getClass(UserController),\n  );\n\n  getAll() {\n    return this.userController\n      .getAll()\n      .received.observable.pipe(map(data =&gt; data.body.json));\n  }\n}\n</code></pre></p> <p>user.component.ts <pre><code>@Component({\n  selector: 'app-user',\n  template: `\n  All users:  {{ users$| async | json }}  \n  `\n})\nexport class UserComponent implements OnInit {\n  userApiService = inject(UserApiService);\n  users$ = this.userApiService.getAll()\n}\n</code></pre></p> <p>app.context.ts <pre><code>import { BaseContext, Taon } from 'taon/src';\nconst host = 'http://localhost:4444'; // host defined once!\n\nconst UserContext = await Taon.createContext(()=&gt; {\n    host,\n    contextName: 'UserContext',\n    contexts: { BaseContext },\n    controllers: { UserController },\n    entities: { User },\n    database: true,\n  });\n\n// initialize on backend and frontend \nasync function start() {\n  await UserContext.initialize():   \n}\n</code></pre></p>"},{"location":"tnp/docs/EXAMPLES/#4-super-easy-realtime-sockets-communication","title":"4. Super easy realtime / sockets communication","text":"<ul> <li>Real-time communication as simple as possible!</li> <li>React to entity changes (or custom events) more easily than ever before!</li> </ul> <p>app.ts  (imports) <pre><code>import { Taon, BaseContext } from 'taon/src';\nimport {\n  Observable,\n  Subject,\n  debounce,\n  debounceTime,\n  map,\n  of,\n  scan,\n} from 'rxjs';\nimport {\n  CLIENT_DEV_NORMAL_APP_PORT,\n  CLIENT_DEV_WEBSQL_APP_PORT,\n  HOST_BACKEND_PORT,\n} from './app.hosts';\nimport { Helpers } from 'tnp-core/src';\nimport { _ } from 'tnp-core/src';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n//#region @browser\nimport { Component, inject, Injectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//#endregion\n</code></pre></p> <p>app.ts (constants) <pre><code>const host = 'http://localhost:' + HOST_BACKEND_PORT;\nconst frontendHost =\n  'http://localhost:' +\n  (Helpers.isWebSQL ? CLIENT_DEV_WEBSQL_APP_PORT : CLIENT_DEV_NORMAL_APP_PORT);\nconst saveNewUserEventKey = 'saveNewUserEventKey';\n</code></pre></p> <p>app.ts (angular component + module) <pre><code>//#region @browser\n@Component({\n  template: `hello from realtime subscribers&lt;br /&gt;\n    &lt;br /&gt;\n    &lt;button (click)=\"saveNewUser()\"&gt;save new user&lt;/button&gt;\n    &lt;br /&gt;`,\n  standalone: false,\n})\n@UntilDestroy()\nexport class RealtimeClassSubscriberComponent {\n  $destroy = new Subject();\n  readonly messages$: Observable&lt;string[]&gt; = of([]);\n\n  saveNewUser() {\n    UserContext.realtime.client.triggerCustomEvent(\n      saveNewUserEventKey,\n    );\n  }\n\n  ngOnInit(): void {\n    console.log('realtime client subscribers start listening!');\n\n    UserContext.realtime.client\n      .listenChangesEntityTable(UserEntity)\n      .pipe(untilDestroyed(this), debounceTime(1000))\n      .subscribe(message =&gt; {\n        console.log('realtime message from class subscriber ', message);\n      });\n  }\n}\n//#endregion\n\n//#region @browser\n@NgModule({\n  exports: [RealtimeClassSubscriberComponent],\n  imports: [CommonModule],\n  declarations: [RealtimeClassSubscriberModule],\n})\nexport class SingleFileModule {}\n//#endregion\n</code></pre> app.ts (user entity) <pre><code>@Taon.Entity({\n  className: 'UserEntity',\n})\nexport class UserEntity extends Taon.Base.Entity {\n  //#region @websql1\n  @Taon.Orm.Column.Generated()\n  //#endregion\n  id: number;\n\n  //#region @websql\n  @Taon.Orm.Column.String()\n  //#endregion\n  name: string;\n}\n</code></pre></p> <p>app.ts (user subscriber) <pre><code>@Taon.Subscriber({\n  className: 'RealtimeClassSubscriber',\n})\nexport class RealtimeClassSubscriber extends Taon.Base.SubscriberForEntity {\n  listenTo() {\n    return UserContext.getClass(UserEntity);\n  }\n\n  afterInsert(entity: any) {\n    console.log(`AFTER INSERT: `, entity);\n    UserContext.realtime.server.triggerEntityTableChanges(UserEntity);\n  }\n}\n</code></pre></p> <p>app.ts (user controller) <pre><code>@Taon.Controller({\n  className: 'RealtimeUserController',\n})\nexport class RealtimeUserController extends Taon.Base\n  .CrudController&lt;UserEntity&gt; {\n  entityClassResolveFn = () =&gt; UserEntity;\n\n  realtimeClassSubscriber = this.injectSubscriber( ()=&gt; UserContext.getClass(RealtimeClassSubscriber));\n\n  async initExampleDbData() {\n    //#region @websql\n    await this.saveNewUser();\n    //#endregion\n  }\n\n  async saveNewUser() {\n    //#region @websqlFunc\n    const counterUser = await this.db.count();\n    await this.db.save(\n      _.merge(new UserEntity(), { name: 'user' + (counterUser + 1) }),\n    );\n    Helpers.info(`new user${counterUser + 1} saved.`);\n\n    //#endregion\n  }\n}\n</code></pre></p> <p>app.ts (user context + start function) <pre><code>var UserContext = Taon.createContext(() =&gt; ({\n  host,\n  frontendHost,\n  contextName: 'UserContext',\n  contexts: { BaseContext },\n  controllers: { RealtimeUserController },\n  subscribers: { RealtimeClassSubscriber },\n  entities: { RealtimeUserEntity: UserEntity },\n  database: true,\n  logs: {\n    realtime: true,\n    // db: true,\n    // framework: true,\n  },\n}));\n\nasync function start() {\n  const userContext = await UserContext.initialize();\n  const realtimeUserController = userContext.getClassInstance(RealtimeUserController);\n\n  //#region @websql\n  UserContext.realtime.server\n    .listenChangesCustomEvent(saveNewUserEventKey)\n    .subscribe(async () =&gt; {\n      console.log('save new user event');\n      await realtimeUserController.saveNewUser();\n    });\n  //#endregion\n}\n\nexport default start;\n</code></pre></p>"},{"location":"tnp/docs/PHILOSOPHY/","title":"Philosophy","text":""},{"location":"tnp/docs/PHILOSOPHY/#1-one-language-for-frontendbackenddatabase-typescript","title":"1. One language for Frontend/Backend/Database - TypeScript","text":"<p>...best programming language on the market \ud83d\ude80</p>"},{"location":"tnp/docs/PHILOSOPHY/#2-rock-solid-frameworks-as-foundation","title":"2 Rock solid frameworks as foundation","text":"<p>TypeScript, Angular, NodeJs, RxJS, NgRx, TypeOrm, ExpressJs ..\u2b50</p>"},{"location":"tnp/docs/PHILOSOPHY/#3-never-ever-repeat-single-line-of-code","title":"3. Never ever repeat single line of code","text":"<p>.. only possible with isomorphic code \u2705</p>"},{"location":"tnp/docs/PHILOSOPHY/#4-strongly-typed-frontendbackenddatabase","title":"4. Strongly Typed Frontend/Backend/Database","text":"<p>...imagine changing an entity property, and as a result, Angular template variables are automatically refactored!  This is the ultimate way to practice \"Don't Repeat Yourself\" (DRY) in coding! \u270d\ufe0f</p>"},{"location":"tnp/docs/PHILOSOPHY/#5-everything-automatically-generated","title":"5. Everything automatically generated","text":"<p>...forget problems with setup =&gt; Taon recreates  every time every crucial framework file/config! \u270f\ufe0f</p>"},{"location":"tnp/docs/PHILOSOPHY/#6-fastdeveloper-friendly-coding-in-visual-studio-code","title":"6. Fast/developer-friendly coding in Visual Studio Code","text":"<p>... if you love VSCode =&gt; you are going to love it more! \ud83d\udc68\u200d\ud83d\udcbb</p>"},{"location":"tnp/docs/PHILOSOPHY/#7-every-package-available-everywhere-shared-node_modules-for-similar-projects","title":"7. Every package available everywhere - shared node_modules for similar projects","text":"<p>...one big npm packages container (located in: ~/.taon/taon/projects/container-v18)  =&gt; many projects takes megabytes instead gigabytes \ud83d\udc33 =&gt; instant node_modules installation \ud83d\udd59</p>"},{"location":"tnp/docs/PHILOSOPHY/#8-cloud-based-projects-releases-standalone-and-organization-to-remote-serves-npms","title":"8. Cloud based projects releases (standalone and organization) to remote serves, npm's","text":"<p>...start complex release processes with one simple command \u26a1</p>"},{"location":"tnp/docs/PHILOSOPHY/#9-develop-libraries-and-apps-at-the-same-time","title":"9. Develop libraries and apps at the same time","text":"<p>...only possible with isomorphic code (shared files between backend/frontend/libraries) \ud83c\udf1f</p>"},{"location":"tnp/docs/PHILOSOPHY/#10-nodejs-packages-are-mixed-with-proper-angular-ivy-packages","title":"10. NodeJs packages are mixed with proper Angular ivy packages","text":"<p>...ship powerful packages with Frontend and Backend \ud83e\udd1d</p>"},{"location":"tnp/docs/PHILOSOPHY/#11-shared-assets-inside-npm-package-only-from-srcassetsshared","title":"11. Shared assets inside npm package! (only from /src/assets/shared)","text":"<p>...because why not! \ud83d\udcbe</p>"},{"location":"tnp/docs/PHILOSOPHY/#12-websql-development-mode-for-developing-sql-backenddb-inside-browser","title":"12. Websql development mode for developing SQL backend/db inside browser","text":"<p>...If browsers are so powerful, why not to write Backend inside them? \ud83c\udf10   TypeORM/Sql.js lets you use browser IndexedDB as proper DB!  \ud83d\uddc4\ufe0f</p>"},{"location":"tnp/docs/PHILOSOPHY/#13-out-of-the-box-cicd-solution-free-of-charge","title":"13. Out-of-the-box CI/CD solution, free of charge!","text":"<p>...start with free websql app demo in github pages publishing/deployment service  =&gt; .. and if peoples love idea  =&gt;  deploy to FAST TAON CLOUD just by choosing different release type in cli!  \u26a1</p>"},{"location":"tnp/docs/PHILOSOPHY/#14-the-most-thought-out-development-process","title":"14. The Most Thought-Out Development Process","text":"<p>...you are not going to need any DEV_OPS - cli &amp; configs  are build for humans \ud83e\udde0</p>"},{"location":"tnp/docs/RELEASE-CLOUD/","title":"RELEASE CLOUD","text":""},{"location":"tnp/docs/RELEASE-CLOUD/#cloud-release","title":"Cloud Release","text":"<p>\ud83d\ude80 Trigger release on remote (or localhost) Taon Cloud instance</p> <p>\ud83d\ude80 Cloud Release actually uses Manual Release with config on remote (or localhost) Taon Cloud </p> Artifact name Cloud npm lib and cli tool(cloud)         \u231b - trigger remote npm lib/cli publish        \u231b - trigger remote npm libraries chain publish  angular node app(cloud)       \u231b - trigger remote build based on config     \u231b - release is bumping versions and deploying to servers     \u231b - release and deployment is a same thing here      vscode plugin(cloud)       \u231b - trigger remote build/publish to azure       \u231b - trigger remote build/publish to special assets server  electron app(cloud)       \u231b - trigger remote build/publish/deploy to application stores mobile app(cloud)       \u231b - trigger remote build/publish/deploy to application stores docs webapp(cloud)       \u231b - trigger remote build/publish/deploy to remote server website assets"},{"location":"tnp/docs/RELEASE-LOCAL/","title":"RELEASE LOCAL","text":""},{"location":"tnp/docs/RELEASE-LOCAL/#localrepo-release","title":"Local/Repo Release","text":"<p>\ud83d\ude80 All released artifacts stored inside project repository</p> <p>\ud83d\ude80 Perfect if you are starting project alone and you need  to somehow show your work/progress</p> Artifact name Local/Repo npm lib and cli tool(local/repo)        \ud83d\udca1 Fully ready cli quickly globally linked in system (npm link)      \u231b  - release lib and cli into: repo-folder/local_release/npm-lib-and-cli-tool/project-name angular node app(local/repo)      \ud83d\udca1 Easy way to check if our deployment system is operational     \ud83d\udd32  - release docker images (dockers backend, frontend, routers etc.) to  repo-folder/local_release/angular-node-app/project-name vscode plugin(local/repo)      \ud83d\udca1 Installable *.vsix VSCode extension for dev-s local development.     \ud83d\udd32  - release *.vsix plugin file into:  repo-folder/local_release/vscode-plugin/project-name electron app(local/repo)      \ud83d\udca1 App needed for local development/projects management     \ud83d\udd32  - release app installer (or executable) into:  repo-folder/local_release/electron-app/(win/mac/linux)/project-name mobile app(local/repo)      \ud83d\udca1 Mobile app needed for local development/testing     \ud83d\udd32  - release .apk, .ipa app into:  repo-folder/local_release/mobile-app/(win/mac/linux)/project-name docs webapp(local/repo)      \ud83d\udca1 Docs of application inside repo instead online     \ud83d\udd32  - release docs webapp into:  repo-folder/local_release/docs-webapp/(win/mac/linux)/project-name"},{"location":"tnp/docs/RELEASE-MANUAL/","title":"RELEASE MANUAL","text":""},{"location":"tnp/docs/RELEASE-MANUAL/#manual-release","title":"Manual Release","text":"<p>\ud83d\ude80 Purpose: release artifacts using cli on development machine</p> <p>\ud83d\ude80 Purpose: A convenient way to check if the Cloud Release will work.</p> <p>\ud83d\ude80 This release creates a config that is used later in the Cloud Release.</p> Artifact name Manual npm lib and cli tool(manual)         \u231b - publish as normal package (project name as npm name)        \u231b - publish as organization package (container name as org. name)        \u231b - handle public/private npm (login if needed), use .npmrc        \u231b - build option: publish only cli without lib code        \ud83e\udd14 - build option: minify/obscure library code file by file         \u231b - build option: (single one file) minify/obscure whole library/cli angular node app(manual)       \u231b - build docker with router for NodeJs backend and Angular frontend      \u231b - docker can be use with any docker management system     \u231b - taon cloud handle start/stop/update/deployment of dockers/apps     \u231b - release docs webapp to github_pages special branch:  vscode plugin(manual)       \u231b - publish to azure when azure cloud cli available       \u231b - publish special website assets as new release  electron app(manual)       \u231b - publish to store (ms store, mac app store, snap, flatpak)        \u231b - publish special website assets as new release  mobile app(manual)      \u231b - publish to app store (play, app store, app gallery)       \u231b - publish special website assets as new release  docs webapp(manual)      \u231b - publish special website assets documentation as new release      \u231b - release docs webapp to github_pages special branch:"},{"location":"tnp/docs/RELEASE-STATIC-PAGES/","title":"RELEASE STATIC PAGES","text":""},{"location":"tnp/docs/RELEASE-STATIC-PAGES/#static-pages-release","title":"Static Pages Release","text":"<p>Take advantage of github pages (or similar solution) in a best possible way.</p> <p>\ud83d\ude80 Purpose: release any compiled/bundled artifact to static pages  (free Github Pages)</p> <p>\ud83d\ude80 Purpose: A convenient way to store artifacts with with versions</p> <p>\ud83d\ude80 Perfect for storing open source apps/libs/docs</p> Artifact name Static Pages npm lib and cli tool(static-pages)         \u231b - publish zipped (also with source code) library/cli to  static_pages_branch/assets/npm-lib-and-cli-tool/version-X-X-X        \u231b - additionally bundled script for cli installation   angular node app(static-pages)       \u231b -  publish angular app with WEBSQL backend to  static_pages_branch vscode plugin(static-pages)       \u231b - publish zipped (also with source code) vscode plugin to  static_pages_branch/assets/vscode-plugin/version-X-X-X/ electron app(static-pages)       \u231b - publish zipped (also with source code) electron app installer to  static_pages_branch/assets/electron-app/version-X-X-X mobile app(static-pages)      \u231b - publish zipped (also with source code) mobile app installer to  static_pages_branch/assets/mobile-app/version-X-X-X docs webapp(static-pages)      \u231b - publish documentation to static_pages_branch/documentation"},{"location":"tnp/experiments/","title":"NodeJS applications experiments","text":""},{"location":"tnp/experiments/#unified-build-process-manager","title":"Unified build process manager","text":"<ul> <li>screens:</li> <li>MENU child processes selection: TSC, NG1, NG2 (just like in taon)</li> <li>OUTPUT processes unified output</li> <li>purpose:</li> <li>just one command for build: taon build -&gt; displays MENU</li> <li>after selecting child process user goes to OUTPUT</li> <li>pressing \"enter\" hides outputs from child processes -&gt; MENU is shown</li> <li>MENU is perfect for:    -&gt; starting/restarting/killing children processes    -&gt; displaying information about process (pid,ppid,cpu/mem usage)    -&gt; no more starting many commands like: taon build + taon app =&gt; everything in build</li> </ul>"},{"location":"tnp/solutions/GITLAB/","title":"password reset","text":"<pre><code>gitlab-rake \"gitlab:password:reset[root]\"  \n</code></pre>"},{"location":"tnp/solutions/HACKS/","title":"CHROME","text":""},{"location":"tnp/solutions/HACKS/#-accept-any-certificate-in-chrome","title":"- Accept any certificate in chrome","text":"<p>type in chrome conole <pre><code>sendCommand(SecurityInterstitialCommandId.CMD_PROCEED)\n</code></pre></p> <p>or type <pre><code>thisisunsafe\n</code></pre></p>"},{"location":"tnp/solutions/HACKS/#vscode-termianl-big-sur-fix","title":"vscode termianl big sur fix","text":"<pre><code>codesign --remove-signature /Applications/Visual\\ Studio\\ Code.app/Contents/Frameworks/Code\\ Helper\\ \\(Renderer\\).app\n</code></pre>"},{"location":"tnp/solutions/HACKS/#git-vpn-split","title":"git vpn-split","text":"<pre><code>git config --global url.\"git://\".insteadOf https://\ngit config --global http.sslVerify false\n# hmmmmmmmmm git remote ls suck\n</code></pre>"},{"location":"tnp/solutions/HACKS/#-inspect-angular-js-element","title":"- Inspect angular js element","text":"<pre><code>angular.element($0).scope()\n</code></pre>"},{"location":"tnp/solutions/HACKS/#macbook","title":"MACBOOK","text":"<p>fix nvme sleep wake</p> <p><code>alt + command + p + r + power</code> </p> <pre><code>sudo pmset -a hibernatemode 0 standby 0 autopoweroff 0\n# or just ??\nsudo pmset hibernatemode 0 standby 0\n</code></pre> <p>Default: <pre><code>sudo pmset restoredefaults\npmset -g\n</code></pre></p>"},{"location":"tnp/solutions/HACKS/#big-sur-brew","title":"BIG SUR brew","text":"<pre><code>/usr/sbin/softwareupdate --install-rosetta --agree-to-license\narch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\narch -x86_64 brew install &lt;package&gt;\n</code></pre>"},{"location":"tnp/solutions/HACKS/#set-origin-name","title":"set origin name","text":"<pre><code>git remote set-url orgin &lt;my-new-origin-name&gt;\n</code></pre>"},{"location":"tnp/solutions/HACKS/#node_modules-files-size","title":"node_modules files size","text":"<pre><code>du -sh ./node_modules/* | sort -nr | grep '\\dM.*'\n</code></pre>"},{"location":"tnp/solutions/HACKS/#mp3-download","title":"mp3 download","text":"<p>youtube-dl -x --audio-format mp3 --prefer-ffmpeg youyublink</p>"},{"location":"tnp/solutions/LINUX/","title":"mount samba share as disk","text":"<pre><code>sudo mount -t cifs -o username=myUsername,password=myPassword,uid=$(id -u),gid=$(id -g),forceuid,forcegid //192.168.10.100/public /media/sharename\n</code></pre> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n\nsudo apt-get install git build-essential python gedit\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\nnvm install 9.4\nnvm alias default node\nnpm install -g npm\nnpm install -g check-node-version npm-run@4.1.2 rimraf cpr renamer nodemon typescript@3.8.3\nnpm link\nssh-keygen -t rsa -b 4096 -C \"darekf77@gmail.com\" &amp;&amp; cat ~/.ssh/id_rsa.pub\nread -n1 -r -p \"Please add the ssh key above to your github ssh keys...\" key\ngit clone git@github.com:darekf77/tsc-npm-project.git\ncd tsc-npm-project\nnpm i &amp;&amp; tsc &amp;&amp; npm link\n# increase number of watchers\n5\n# sudo sysctl fs.inotify.max_user_watches=16384 fix for https://github.com/sass/node-sass/issues/2534 no space left\n\ngit config --global user.email \"darekf77@gmail.com\"\ngit config --global user.name  \"Dariusz\"\ngit config --global core.editor code --wait\n# git config --global core.editor \"nano\"\necho \"Client configuration done\"\n\n# ==================== set password for ssh server ====================\n# locale: Cannot set LC_CTYPE to default locale: No such file or directory\n# locale: Cannot set LC_ALL to default locale: No such file or directory\n# fix:\n# export LC_ALL=\"en_US.UTF-8\"\n# ===========================================================\n\n# ==================== vnc server ====================\n# https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-9\nsudo apt install xfce4 xfce4-goodies\nsudo apt install tightvncserver\nvncserver\nvncserver -kill :1\nmv ~/.vnc/xstartup ~/.vnc/xstartup.bak\n`tnp bashconfigvncstart` &gt;&gt; ~/.vnc/xstartup\nsudo chmod +x ~/.vnc/xstartup\nsudo `tnp bashconfigvncservice` &gt;&gt; /etc/systemd/system/vncserver@.service\nsudo systemctl daemon-reload\nsudo systemctl enable vncserver@1.service\nsudo systemctl start vncserver@1\n# ===========================================================\n\n# ==================== set password for ssh server ====================\n# crate good password for users\nsudo apt install openssh-server\n# ===========================================================\n\n# ==================== set password for samba ====================\nsudo apt-get install samba\nsmbpasswd -a john\nsudo usermod -a -G sambashare john # wil fix issue on debian\n# ===========================================================\n\n# ==================== set terminal font ====================\n# file \" /etc/default/console-setup\n# CHARMAP=\"UTF-8\"\n# CODESET=\"Lat7\"\n# FONTFACE=\"Terminus\"\n# FONTSIZE=\"28x14\"\n# ===========================================================\n\n\n# # server\n# sudo apt-get update &amp;&amp; sudo apt-get upgrade\n# sudo apt install git build-essential python\n# wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n# export NVM_DIR=\"$HOME/.nvm\"\n# [ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n# [ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n# nvm install 9.4 &amp;&amp; npm install -g npm\n# npm install -g check-node-version npm-run@4.1.2\\\n#  rimraf cpr renamer nodemon typescript@2.6.2 increase-memory-limit\n# ssh-keygen -t rsa -b 4096 -C \"darekf77@gmail.com\" &amp;&amp; cat ~/.ssh/id_rsa.pub\n# read -n1 -r -p \"Please add the ssh key above to your github ssh keys...\" key\n# git clone git@github.com:darekf77/tsc-npm-project.git\n# cd tsc-npm-project\n# npm i &amp;&amp; tsc &amp;&amp; npm link\n# export LC_ALL=\"en_US.UTF-8\"\n# cd projects/site &amp;&amp; tnp build\n# tnp start 2&gt;&amp;1 &gt;/dev/null &amp;\n\n# samba\nuseradd dariusz\n\n\n# open equivalen \n# /usr/share/bin/open\n xdg-open \"$1\" &amp;&gt; /dev/null &amp;\n</code></pre>"},{"location":"tnp/solutions/LINUX/#mesure-script-time","title":"mesure script time","text":"<pre><code>time tnp build ss-ui\n</code></pre>"},{"location":"tnp/solutions/LINUX/#copy-script-for-dependencies","title":"copy script for dependencies","text":"<pre><code>rimraf ../tnp/node_modules/`basename \\`pwd\\`` &amp;&amp; cp -R `pwd`/dist ../tnp/node_modules/`basename \\`pwd\\``\n</code></pre>"},{"location":"tnp/solutions/LINUX/#increase-number-of-watchers-in-linux","title":"increase number of watchers in linux","text":"<pre><code>/etc/sysctl.conf -&gt; append fs.inotify.max_user_watches=524288\n\ncheck command: cat /proc/sys/fs/inotify/max_user_watches\n</code></pre>"},{"location":"tnp/solutions/MACOS/","title":"macos cheat sheet","text":"<pre><code>xcode-select --install # Install Command Line Tools if you haven't already.\nsudo xcode-select --switch /Library/Developer/CommandLineTools # Enable command line tools\n# install XCode and make sure that is in /Application\nsudo mdutil -a -i off # disalbe search  indexing\n# or enable sudo mdutil -a -i on\nnvm install 9.4\nnvm use 9.4\nnvm alias default 9.4\nnpm install npm@latest -g\ngit config --global core.editor code --wait\n\n# disable eject message\n# /System/Library/LaunchDaemons/com.apple.UserNotificationCenter.plist: Operation not permitted# while System Integrity Protection is engag\nsudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.UserNotificationCenter.plist\n\n# brew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# macports\nhttps://guide.macports.org/#installing\n\n# disable spotlight\n sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist\n# or enable\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist\n\n\n\n# disk temp\nbrew install smartmontools\ndiskutil list # slect disk\nsmartctl -a disk1 | grep Temperature\n\n\n# disable batter plug in sound\ndefaults write com.apple.PowerChime ChimeOnNoHardware -bool true\nkillall PowerChime\n\n# default shell bash\nchsh -s /bin/bash\n</code></pre>"},{"location":"tnp/solutions/MACOS/#node-12","title":"NODE 12","text":"<p>brew install pkg-config cairo pango libpng jpeg giflib librsvg libvips vips arch -x86_64 brew install pkg-config cairo pango libpng jpeg giflib librsvg libvips vips</p>"},{"location":"tnp/solutions/MACOS/#time-machine-logs","title":"time machine logs","text":"<p>log show --predicate 'subsystem == \"com.apple.TimeMachine\"' --info | grep 'upd: (' | cut -c 1-19,140-999</p>"},{"location":"tnp/solutions/MACOS/#actions","title":"Actions:","text":"<ul> <li>Install and update system</li> <li>Add ssh keys to system</li> <li>Set up git name, email</li> <li>Set up nvm, node, npm</li> <li>Clone &amp; build &amp; install &amp; link tnp</li> <li>(server) set bigger font for terminal</li> <li>(linux) Add support for hsf+ with jouringling</li> <li>(mac/hackintosh) Add support for ntfs write</li> <li>Fix fix issue with file wathcing</li> <li>(mac) install homebrew</li> <li>(mac) disable spotlight</li> </ul>"},{"location":"tnp/solutions/NODE-BASE/","title":"NODE BASE","text":"<pre><code>export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" &amp;&amp; [ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\\\. \"$NVM_DIR/nvm.sh\" &amp;&amp; nvm use v14';\n</code></pre>"},{"location":"tnp/solutions/NODE-ROUTER/","title":"NODE ROUTER","text":"<p>Redirect things</p> <p>```ts  private server(onServerReady: (serverPort?: number) =&gt; void) {     const proxy = httpProxy.createProxyServer({});</p> <pre><code>const server = http.createServer((req, res) =&gt; {\n  const target = this.getTarget(req);\n  if (target) {\n    proxy.web(req, res, { target });\n  } else {\n    res.write('not found')\n    res.end();\n  }\n});\n\nserver.on('upgrade', (req, socket, head) =&gt; {\n  const target = this.getTarget(req)\n  proxy.ws(req, socket, head, target ? { target } : void 0);\n});\n\nconst serverPort = this.project.getDefaultPort();\n\nserver.listen(serverPort, () =&gt; {\n  Helpers.log(`Proxy Router activate on ${this.project.env.config.workspace.workspace.host}`)\n  if (_.isFunction(onServerReady)) {\n    onServerReady(serverPort);\n  }\n}).on('error', e =&gt; {\n  Helpers.log('proxy server error ')\n  Helpers.error(e, true, true)\n})\n</code></pre> <p>}   ```</p>"},{"location":"tnp/solutions/SNIPPETS/","title":"git - remove submodule without deleting it","text":"<pre><code>git rm --cached path_to_submodule (no trailing slash).\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#ip-of-interface-from-cmd-linke","title":"ip of interface from cmd linke","text":"<pre><code> ipconfig getifaddr en0\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#trackable-array","title":"trackable array","text":"<pre><code>class TrackedArray&lt;T&gt; extends Array&lt;T&gt; {\n  constructor(...args: any[]) {\n    super(...args);\n\n    const mutationMethods = [\n      'push', 'unshift', 'pop', 'shift', 'splice', 'sort', 'reverse', 'fill', 'copyWithin'\n    ];\n\n    return new Proxy(this, {\n      get(target, prop, receiver) {\n        if (mutationMethods.includes(prop as string)) {\n          return function (...args: any[]) {\n            console.log(`Array method \"${String(prop)}\" called with:`, args);\n            debugger;\n            return (Array.prototype as any)[prop].apply(target, args);\n          };\n        }\n\n        return Reflect.get(target, prop, receiver);\n      },\n      set(target, prop, value, receiver) {\n        if (\n          typeof prop === 'string' &amp;&amp;\n          (!isNaN(Number(prop)) || prop === 'length')\n        ) {\n          console.log(`Setting ${String(prop)} =`, value);\n          debugger;\n        }\n        return Reflect.set(target, prop, value, receiver);\n      }\n    });\n  }\n}\n\n\n\nfunction createTrackedArray&lt;T&gt;(existingArray: T[]): TrackedArray&lt;T&gt; {\n    const trackedArray = new TrackedArray&lt;T&gt;();\n\n    // Copy elements from the existing array to the tracked array\n    trackedArray.push(...existingArray);\n\n    return trackedArray;\n}\n\nconst normalArray = [];\nconst trackableArr = createTrackedArray(normalArray)\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#dynamic-getter","title":"dynamic getter","text":"<pre><code>if (isUndefined(Object.getOwnPropertyDescriptor(model, 'locationOidView'))) {\n  Object.defineProperty(model, 'locationOidView', {\n    get() {\n      return location.retailerId;\n    }\n  });\n}\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#display-json","title":"display json","text":"<pre><code>jsonstring = JSON.stringify(o, null, 2)\nhtml = `&lt;h6  style=\" white-space: pre;\"  ng-bind-html=\"jsonstring'&gt; &lt;/h6&gt;`\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#make-sure-view-value-is-positive-integer","title":"make sure view value is positive integer","text":"<pre><code>// make sure $viewValue is positive interger\nconst parsed = parseInt($viewValue);\nif (isNaN(parsed)) {\n  if (isString($viewValue)) {\n    model.noOfTellersToCreate = $viewValue.replace(/\\D+/g, '');\n  }\n} else {\n  if (parsed === 0) {\n    model.noOfTellersToCreate = void 0;\n    $viewValue = void 0;\n  }\n  if (parsed &lt; 0) {\n    model.noOfTellersToCreate = Math.abs(parsed);\n    $viewValue == Math.abs(parsed);\n  }\n  if (parsed &gt; MAX_CLERKS_TO_ADD) {\n    model.noOfTellersToCreate = MAX_CLERKS_TO_ADD;\n  }\n}\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#simplest-angular-appts","title":"simplest angular app.ts","text":"<pre><code>//#region @notForNpm\nimport { Taon } from 'firedev';\n// import 'core-js/client/shim';\n// import 'reflect-metadata';\nrequire('zone.js/dist/zone');\nimport { Component, NgModule, ApplicationRef } from '@angular/core';\nimport { enableProdMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport '@angular/material/prebuilt-themes/indigo-pink.cs'\n\n@Component({\n  selector: 'my-app', // &lt;my-app&gt;&lt;/my-app&gt;\n  template: `\n  &lt;h1&gt; Hello from component! &lt;/h1&gt;\n  `,\n})\nexport class AppComponent { }\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n// depending on the env mode, enable prod mode or add debugging modules\n// if (ENV.isBUild === 'build') {\n//   enableProdMode();\n// }\n\nexport function main() {\n  return platformBrowserDynamic().bootstrapModule(AppModule);\n}\n\n\n\nasync function start() {\n  console.log('hello')\n\n  const body: HTMLElement = document.getElementsByTagName('body')[0];\n  body.innerHTML = `&lt;my-app&gt;Loading...&lt;/my-app&gt;`;\n\n  if (Taon.isBrowser) {\n    if (document.readyState === 'complete') {\n      main();\n    } else {\n      document.addEventListener('DOMContentLoaded', main);\n    }\n  }\n}\n\nif (Taon.isBrowser) {\n  start();\n}\n\nexport default start;\n\n\n//#endregion\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#backend-and-angular-material","title":"backend and angular material","text":"<pre><code>import { Taon } from 'firedev';\n// import 'core-js/client/shim';\n// import 'reflect-metadata';\nif (Taon.isBrowser) {\n  require('zone.js/dist/zone');\n}\n\nimport { Component, NgModule, ApplicationRef } from '@angular/core';\nimport { enableProdMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MatCardModule } from '@angular/material/card';\n\nconst host = 'http://localhost:3333';\n\n\n\n@Taon.Entity({ className: 'Book' })\nclass Book extends Taon.Base.Entity&lt;any&gt; {\n  static from(name: string) {\n    const b = new Book();\n    b.name = name;\n    return b;\n  }\n\n  //#region @backend\n  @Taon.Orm.Column.Custom('varchar')\n  //#endregion\n  public name: string\n\n  //#region @backend\n  @Taon.Orm.Column.Generated()\n  //#endregion\n  public id: number\n\n}\n\n\n\n@Taon.Controller({ className: 'BookCtrl', entity: Book })\nclass BookCtrl extends Taon.Base.Controller&lt;any&gt; {\n  //#region @backend\n  async initExampleDbData() {\n    const db = await this.connection.getRepository(Book);\n    await db.save(Book.from('alice in wonderland'));\n    await db.save(Book.from('cryptography'));\n  }\n  //#endregion\n}\n\n@Component({\n  selector: 'my-app', // &lt;my-app&gt;&lt;/my-app&gt;\n  template: `\n  &lt;h1&gt; Hello from component! &lt;/h1&gt;\n  &lt;mat-card&gt;Simple card&lt;/mat-card&gt;\n  `,\n})\nexport class AppComponent {\n  constructor(\n    public ctrl: BookCtrl\n  ) {\n\n  }\n  async ngOnInit() {\n    const data = (await this.ctrl.getAll().received).body.json as Book[];\n    console.log(data);\n  }\n}\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    ...[\n      MatCardModule,\n    ]\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  providers: [\n    BookCtrl\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n// depending on the env mode, enable prod mode or add debugging modules\n// if (ENV.isBUild === 'build') {\n//   enableProdMode();\n// }\n\nexport function main() {\n  return platformBrowserDynamic().bootstrapModule(AppModule);\n}\n\n\n\nasync function start() {\n  console.log('hello')\n\n  //#region @backend\n  const config = {\n    type: \"sqlite\",\n    database: 'tmp-db.sqlite',\n    synchronize: true,\n    dropSchema: true,\n    logging: false\n  };\n  //#endregion\n\n  const context = await Taon.init({\n    host,\n    controllers: [BookCtrl],\n    entities: [Book],\n    //#region @backend\n    config: config as any\n    //#endregion\n  });\n  console.log(context);\n\n  if (Taon.isBrowser) {\n    const body: HTMLElement = document.getElementsByTagName('body')[0];\n    body.innerHTML = `&lt;my-app&gt;Loading...&lt;/my-app&gt;`;\n    if (document.readyState === 'complete') {\n      main();\n    } else {\n      document.addEventListener('DOMContentLoaded', main);\n    }\n  }\n}\n\nif (Taon.isBrowser) {\n  start();\n}\n\nexport default start;\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#canvasd-drawing","title":"canvasd drawing","text":"<pre><code>$(document).ready(function() {\n  var flag, dot_flag = false,\n    prevX, prevY, currX, currY = 0,\n    color = 'black', thickness = 2;\n  var $canvas = $('#canvas');\n  var ctx = $canvas[0].getContext('2d');\n\n  $canvas.on('mousemove mousedown mouseup mouseout', function(e) {\n    prevX = currX;\n    prevY = currY;\n    currX = e.clientX - $canvas.offset().left;\n    currY = e.clientY - $canvas.offset().top;\n    if (e.type == 'mousedown') {\n      flag = true;\n    }\n    if (e.type == 'mouseup' || e.type == 'mouseout') {\n      flag = false;\n    }\n    if (e.type == 'mousemove') {\n      if (flag) {\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(currX, currY);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n  });\n\n  $('.canvas-clear').on('click', function(e) {\n    c_width = $canvas.width();\n    c_height = $canvas.height();\n    ctx.clearRect(0, 0, c_width, c_height);\n    $('#canvasimg').hide();\n  });\n});\n</code></pre> <pre><code>&lt;html&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.0/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;body&gt;\n    &lt;canvas id=\"canvas\" width=\"400\" height=\"400\" style=\"position:absolute;top:10%;left:10%;border:2px solid;\"&gt;&lt;/canvas&gt;\n    &lt;input type=\"button\" value=\"Clear\" class=\"canvas-clear\" /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>\"preinstall\": \" chalk red bold ERROR: &amp;&amp; echo Use: &amp;&amp; chalk red bold \\\"firedev install\\\" &amp;&amp; echo instead &amp;&amp; chalk gray bold \\\"npm install\\\" &amp;&amp; exit 1\",\n\"preinstall\": \"echo \\\"ERROR:  Use \\\"firedev install\\\" instead \\\"npm install\\\" \\\" &amp;&amp; exit 1\",\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#decorator-that-is-modyfying-methods","title":"decorator that is modyfying methods","text":"<pre><code>import { ClassHelpers } from '../../helpers/class-helpers';\nimport { Symbols } from '../../symbols';\nimport { Models } from '../../models';\nimport { _ } from 'tnp-core/src';\nimport type { BaseSubscriberForEntity } from '../../base-classes/base-subscriber-for-entity';\nimport type { EndpointContext } from '../../endpoint-context';\n\nexport class TaonSubscriberOptions&lt;\n  T = any,\n&gt; extends Models.DecoratorAbstractOpt {\n  allowedEvents?: (keyof T)[];\n}\n\nexport function TaonSubscriber(options: TaonSubscriberOptions) {\n  return function &lt;T extends { new (...args: any[]): {} }&gt;(constructor: T) {\n    Reflect.defineMetadata(\n      Symbols.metadata.options.repository,\n      options,\n      constructor,\n    );\n    Reflect.defineMetadata(\n      Symbols.metadata.className,\n      options?.className || constructor.name,\n      constructor,\n    );\n    ClassHelpers.setName(constructor, options?.className);\n    return class extends constructor {\n      constructor(...args: any[]) {\n        super(...args);\n\n        //#region @websql\n        // Get all method names of the class\n        const methodNamesAll = ClassHelpers.getMethodsNames(\n          constructor.prototype,\n        );\n\n        const methodNames = methodNamesAll.filter(m =&gt; {\n          return (\n            !(\n              [\n                '__trigger_event__',\n                'clone',\n                'listenTo',\n              ] as (keyof BaseSubscriberForEntity)[]\n            ).includes(m as any) &amp;&amp;\n            !m.startsWith('_') &amp;&amp;\n            !m.startsWith('inject')\n          );\n        });\n\n        // Wrap each method\n        methodNames.forEach(methodName =&gt; {\n          const originalMethod = (this as any)[methodName];\n\n          (this as any)[methodName] = async (...methodArgs: any[]) =&gt; {\n            const result = originalMethod.apply(this, methodArgs);\n            const self = this as any as BaseSubscriberForEntity&lt;any&gt;;\n            // If the result is a promise, wait for it to resolve\n            if (result instanceof Promise) {\n              await result;\n            }\n\n            // Check if we need to trigger the manual event\n            if (\n              options.allowedEvents === undefined ||\n              options.allowedEvents.includes(methodName)\n            ) {\n              self.__trigger_event__(methodName as any);\n            }\n\n            return result;\n          };\n        });\n        //#endregion\n      }\n    } as any;\n  } as any;\n}\n</code></pre>"},{"location":"tnp/solutions/SNIPPETS/#png-in-terminal","title":"png in terminal","text":"<pre><code>protected async header(): Promise&lt;void&gt; {\n  //#region @backendFunc\n  const logoLight = this.ins\n    .by('container',DEFAULT_FRAMEWORK_VERSION)\n    .pathFor('../../__images/logo/logo-console-light.png');\n\n  const logoDark = this.ins\n    .by('container',DEFAULT_FRAMEWORK_VERSION)\n    .pathFor('../../__images/logo/logo-console-dark.png');\n\n  // console.log({ logoLight });\n  const pngStringify = require('console-png');\n  // consolePng.attachTo(console);\n  const image = fse.readFileSync(logoDark);\n  return new Promise((resolve, reject) =&gt; {\n    pngStringify(image, function (err, string) {\n      if (err) {\n        throw err;\n      }\n      console.log(string);\n      resolve();\n    });\n  });\n  //#endregion\n}\n</code></pre>"},{"location":"tnp/solutions/TODO/","title":"TO REMEBER","text":"<ul> <li>don override in container core thins trusted packages from tnp</li> <li>dont use _.lodash function: values or other that may not be supported across all lodash version</li> <li>dont override symlink with fs</li> <li>node_modules/link_from_another_project_dir is resolving packges not from this node_modules !!!        -&gt; dont use links in node_modules</li> <li>issue with angular loadChildren: './components/+preview-buildtnpprocess/preview-buildtnpprocess.module#PreviewBuildTnpProcesssModule'      =&gt; just change name to wrong... reload... change to  normal and it will be ok !   @@@@ RESOLVE WITH NEW ANGULAR IMPORT SYSTEM</li> </ul>"},{"location":"tnp/solutions/TODO/#issues","title":"ISSUES","text":"<ul> <li>on windows if development server is running can't move/rename folder</li> <li>sometime too much dedupe is a BAD THING</li> <li>dont put Class Componentts to input @Input() </li> <li>maximulat call stack exceeded for lazy loading routing -&gt; include router module</li> <li>dont us getters in for loop, assign value firt</li> <li>should be ONLY ONE VERION of (NG2-REST, RXJS and other...)</li> <li>id, shoud be with undefined (TODO temp soluition)</li> <li>class properties: arrays and object can't have defult propty</li> <li>check if each controller, entity is added to 3 init (index.ts,entites.ts,controlers.ts)</li> <li>\"assets\" relative from html,css ,  \"/assets\" from scss</li> <li>in site, if you are decorating entities REMEMBER to overrirde EntityRepository</li> <li>if you are changing environment setting you have to start build (or watch:build) again</li> <li>watch for circural typescript dependencies !</li> <li>typescipt weird path issue exist stil  :   import { DIALOG } from '../entities'; // ERROR    import { DIALOG } from '../entities/DIALOG'; // OK // entites is folder and file at the same time, maybe that ?</li> <li>DO NOT put watcher on 'src' - it will make webpack build neverend</li> <li>CHECK maybe you forgot \"@\" BEFORE DECORATOR for \"Entity, Controller, Repository !!!</li> <li>Inside isomorphic app.ts simulator use only ./controller and ./entities:   import { ProcessController } from './controllers'; // OK    import { ProcessController } from './controllers/core/ProcessController'; // error undefined</li> <li>angular-lib 'ss-common-ui/module' is not working in src</li> <li>DONT DO THAT: export class Helpers extends HelpersLogger {  static JSON = JSON10; } -&gt; nested types problem in angular</li> <li>Use Helpers.require instead normal require for minification for backend</li> </ul>"},{"location":"tnp/solutions/TODO/#uglify-obscure-donts","title":"UGLIFY, OBSCURE donts","text":"<ul> <li>eval varaible just single ltter</li> <li>require(variable) is not working  (require(''+variable) also sucks)</li> </ul>"},{"location":"tnp/solutions/UNRAID/","title":"GENERAL RULES","text":"<ul> <li>single pci passthrough -&gt; super problem, igpu is best solution</li> <li>(windwo vm) Q35 better for instalation</li> <li>be aware of unstable things<ul> <li>usb ports</li> <li>sata ports</li> <li>pendrive</li> <li>hot chipset</li> </ul> </li> </ul>"},{"location":"tnp/solutions/UNRAID/#override-iommiu","title":"override iommiu","text":"<pre><code>pcie_acs_override=downstream,multifunction \n</code></pre>"},{"location":"tnp/solutions/UNRAID/#instalation-of-macos-vm-macinabox","title":"instalation of macos vm (macinabox)","text":"<p>ONE CONTAINER - ONE INSTALATION</p> <p>delete vm <pre><code>virsh undefine --nvram \"name of VM\"\n</code></pre></p> <p>set default network <pre><code>virsh net-start default\n</code></pre> nerd pack plugin and then install netcat-openbsd.</p> <p>ONLY FOR ERROR: error: Cannot get interface MTU on 'br0': No such device  to  </p> <p>1_macinabox_helper - change name</p>"},{"location":"tnp/solutions/UNRAID/#restart-amd-graphic-card","title":"restart amd graphic card","text":"<pre><code>virsh shutdown \"Ubuntu (gaming)\"\necho \"sleeping 15s\"\nsleep 15\necho \"disconnecting amd graphics\"\necho \"1\" | tee -a /sys/bus/pci/devices/0000\\:03\\:00.0/remove\necho \"disconnecting amd sound counterpart\"\necho \"1\" | tee -a /sys/bus/pci/devices/0000\\:03\\:00.1/remove\necho \"entered suspended state... after 10s server is going to automatically wake up\"\nrtcwake -m mem --local -s 10\n# echo -n mem &gt; /sys/power/state\necho \"reconnecting amd gpu and sound counterpart\"\necho \"1\" | tee -a /sys/bus/pci/rescan\necho \"AMD graphics card sucessfully reset\"\nvirsh start \"Ubuntu (gaming)\"\n</code></pre>"},{"location":"tnp/solutions/UNRAID/#creating-vdisk-with-preallocalted-size","title":"creating vdisk with preallocalted size","text":"<pre><code>qemu-img create -f raw -o preallocation=full /mnt/user/steam-ubuntu/steam-ubuntu.ing 150G\n</code></pre>"},{"location":"tnp/solutions/UNRAID/#converting-disk","title":"converting disk","text":"<pre><code># copy vdisk to physical disk.   \ndd if=\"location/of/vdisk\" of=/dev/sdX\n\n# copy physical disk to vdisk.   \nqemu-img convert -p -O raw /dev/sdx \"/mnt/user/domains/test/vdisk1.img\"\n</code></pre>"},{"location":"tnp/solutions/UNRAID/#passthrough-whole-disk","title":"passthrough whole disk","text":"<pre><code>/dev/disk/by-id/ata-CT1000P1SSD8_1946E227AC55\n/dev/disk/by-id/ata-Samsung_SSD_870_QVO_1TB_S5SVNG0NB06963M\n/dev/disk/by-id/ata-Samsung_SSD_850_EVO_250GB_S21PNSAG621562Z\n/dev/disk/by-id/ata-Samsung_SSD_860_EVO_500GB_S3Z2NB0M704344P\n/dev/disk/by-id/ata-5AS_20150626\n</code></pre>"},{"location":"tnp/solutions/UNRAID/#shrink-vdisk","title":"shrink vdisk","text":"<pre><code>qemu-img resize my.img 74G\n</code></pre>"},{"location":"tnp/solutions/UNRAID/#nvme-crucial-passthrough","title":"nvme crucial passthrough","text":"<pre><code>&lt;domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'&gt;\n...\n    &lt;hostdev mode='subsystem' type='pci' managed='yes'&gt;\n      &lt;source&gt;\n        &lt;address domain='0x0000' bus='0x01' slot='0x00' function='0x0'/&gt;\n      &lt;/source&gt;\n      &lt;alias name='ua-sm2262'/&gt; \n      &lt;address type='pci' domain='0x0000' bus='0x02' slot='0x00' function='0x0'/&gt;\n    &lt;/hostdev&gt;\n...\n  &lt;qemu:commandline&gt;\n    &lt;qemu:arg value='-set'/&gt;\n    &lt;qemu:arg value='device.ua-sm2262.x-msix-relocation=bar2'/&gt;\n  &lt;/qemu:commandline&gt;\n</code></pre>"},{"location":"tnp/solutions/WINDOWS/","title":"Nodejs on windows","text":"<pre><code>npm install --global --production windows-build-tools@4.0.0\n</code></pre>"},{"location":"tnp/solutions/WINDOWS/#engable-git-long-pathes","title":"engable git long pathes","text":"<pre><code>git config --system core.longpaths true\n</code></pre>"},{"location":"tnp/solutions/WINDOWS/#git-proper-end-of-line-of-windows","title":"git proper end of line of windows","text":"<pre><code>git config --global core.autocrlf false\n</code></pre>"},{"location":"tnp/solutions/WINDOWS/#for-problem-with-npm-i-not-tested","title":"for problem with npm i (NOT TESTED)","text":"<pre><code>git config --global url.\"https://\".insteadOf git://\n</code></pre>"},{"location":"tnp/solutions/WINDOWS/#remnove-xbox-shit","title":"remnove xbox shit","text":"<p>https://techjury.net/blog/how-to-uninstall-xbox-game-bar/#gref</p> <p>To open the program:</p> <p>Press the Windows Start button and search for \u201cPowerShell.\u201d Right-click on it and select Run as administrator. When the Windows PowerShell command bar opens, enter the following code to see the packages that are on your system: <pre><code>dism /Online /Get-ProvisionedAppxPackages | Select-String PackageName | Select-String xbox\n</code></pre> You can then uninstall the Xbox game bar windows 10 or 11 via DISM (Deployment Image Servicing and Management) or cmdlet commands: DISM version <pre><code>dism /Online /Get-ProvisionedAppxPackages | `\n\nSelect-String PackageName | `\n\nSelect-String xbox | `\n\nForEach-Object {$_.Line.Split(':')[1].Trim()} | `\n\nForEach-Object { dism /Online /Remove-ProvisionedAppxPackage /PackageName:$_}\n</code></pre></p>"},{"location":"tnp/solutions/WINDOWS/#win-11-install-without-intenret","title":"win 11 install without intenret","text":"<p>fn shift f10 OOBE\\BYPASSNRO</p>"},{"location":"tnp/src/lib/lib-info/","title":"Lib info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p> <p>This folder is an entry point for npm Angular/NodeJS library</p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/src/lib/project/abstract/artifacts/npm-lib-and-cli-tool/tools/build-isomorphic-lib/build-isomorphic-lib/","title":"Build isomorphi lib:","text":""},{"location":"tnp/src/lib/project/abstract/artifacts/npm-lib-and-cli-tool/tools/build-isomorphic-lib/build-isomorphic-lib/#usage-of-region-backend","title":"Usage of region @backend","text":"<pre><code>import { Taon } from 'taon/src'\n\nconsole.log('visible everywhere')\n//#region @backend\nconsole.log('visible in backend only')\n//#endregion\nif(Helpers.isBrowser) {\n  console.log('visible everywhere, but only in browser')\n}\n</code></pre>"},{"location":"tnp/src/lib/project/abstract/artifacts/npm-lib-and-cli-tool/tools/build-isomorphic-lib/build-isomorphic-lib/#usage-of-region-backendfunc","title":"Usage of region @backendFunc","text":"<pre><code>import { Taon } from 'taon/src'\n\n\nclass MyController {\n\n  getSecrets() {\n    //#region @backendFunc\n\n    //#endregion\n  }\n\n\n}\n</code></pre>"},{"location":"tnp/src/lib/project/abstract/artifacts/npm-lib-and-cli-tool/tools/copy-manager/COPY-MANAGER/","title":"COPY MANAGER","text":"<p>For standalone / workspace (smart container)</p> <ol> <li> <p>Copy &amp; sync with node_modules of other project specified in copyto --copyto path-to-project</p> </li> <li> <p>Copy distribution / releae dist to location / project for purpose (new pkg, temp proj)</p> </li> </ol>"},{"location":"tnp/src/migrations/migrations-info/","title":"Migrations info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p> <p>This folder is only for storing migration files with auto-generated names.</p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/src/tests/mocha-tests-info/","title":"Mocha tests info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/src/tests/mocha-tests-info/#purpose-of-this-folder","title":"Purpose of this folder","text":"<p>Put your backend mocha tests (with .test.ts extension) in this folder or any other tests* folder inside project.</p> <pre><code>/src/lib/my-feature/features.test.ts                          # -&gt; NOT ok, test omitted\n/src/lib/my-feature/tests/features.test.ts                    # -&gt; OK\n/src/lib/my-feature/nested-feature/tests/features.test.ts     # -&gt; OK\n</code></pre>"},{"location":"tnp/src/tests/mocha-tests-info/#how-to-test-your-isomorphic-backend","title":"How to test your isomorphic backend ?","text":"<ol> <li> <p>By using console select menu: <pre><code>taon test                   # single run\ntaon test:watch             # watch mode\ntaon test:debug             # and start \"attach\" VSCode debugger\ntaon test:watch:debug       # and start \"attach\" VSCode debugger\n</code></pre></p> </li> <li> <p>Directly: <pre><code>taon mocha                        # single run\ntaon mocha:watch                  # watch mode\ntaon mocha:debug                  # and start \"attach\" VSCode debugger\ntaon mocha:watch:debug            # and start \"attach\" VSCode debugger\n</code></pre></p> </li> </ol>"},{"location":"tnp/src/tests/mocha-tests-info/#example","title":"Example","text":"<p>example.test.ts <pre><code>import { describe, before, it } from 'mocha'\nimport { expect } from 'chai';\n\ndescribe('Set name for function or class', () =&gt; {\n\n  it('should keep normal function name ', () =&gt; {\n    expect(1).to.be.eq(Number(1));\n  })\n});\n</code></pre></p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/tnp-helpers/","title":"taon-helpers ( tnp-helpers )","text":"<ul> <li>part of taon.dev</li> <li>JavasScript/Typescript essential helpers</li> <li>extended/bigger version of taon-core (tnp-core) helpers </li> <li>purspose: </li> <li>every JS/TS helper that I could imagine</li> <li>smart isomorphic mocks for backend/NodeJs things</li> </ul>"},{"location":"tnp/tnp-helpers/#usage","title":"Usage","text":"<ul> <li> <p>in taon isomorphic libs/apps or any NodeJS apps/libs: <pre><code>import { Helpers } from 'tnp-helpers';\n</code></pre></p> </li> <li> <p>in any frontend browser apps (except taon lib/apps) <pre><code>import { Helpers } from 'tnp-helpers/browser';\n</code></pre></p> </li> </ul>"},{"location":"tnp/tnp-helpers/BUILD-INFO/","title":"CURRENT BUILD INFO","text":""},{"location":"tnp/tnp-helpers/BUILD-INFO/#normal-app-frontend","title":"NORMAL APP FRONTEND:","text":"<p>http://localhost:4247</p> <ul> <li>normal app node backend: http://localhost:4103</li> </ul>"},{"location":"tnp/tnp-helpers/BUILD-INFO/#websql-app-backendfrontend","title":"WEBSQL APP BACKEND/FRONTEND:","text":"<p>http://localhost:4248</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/","title":"Git","text":""},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#handy-shortcuts","title":"Handy shortcuts","text":"<p><code>taon soft</code>  =&gt; <code>git reset --soft HEAD~1</code></p> <p><code>taon hosts</code>  =&gt; open hosts files in VSCode</p> <p><code>taon count:commits</code>  =&gt; show origin of project</p> <p><code>taon remove:submodules</code>  =&gt; remove all submodules from repo</p> <p><code>taon remove:submodule my-not-wanted-git-submodules</code>  =&gt; remove submodule by folder name</p> <p><code>taon remove:tag git-tag-name-optionally</code> =&gt; remove git tag (if not provided name - select menu appears)</p> <p><code>taon last:tag</code> =&gt; display info aboutlast tag</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#remotes","title":"Remotes","text":"<p><code>taon origin</code>  =&gt; show origin of project</p> <p><code>taon remote</code>  =&gt; <code>taon origin</code> </p> <p><code>taon origins</code>  =&gt; show all origins of project</p> <p><code>taon remotes</code>  =&gt; <code>taon origins</code></p> <p><code>taon rename:origin http://my-new-origin</code>  =&gt; replaces default origin new provided</p> <p><code>taon set:origin http://my-new-origin</code>  =&gt; alias to rename:origin</p> <p><code>taon set:remote:ssh</code>  =&gt; changes http remote to ssh remote</p> <p><code>taon set:remote:http</code>  =&gt; changes ssh remote to https remote</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#rebase","title":"Rebase","text":"<p><code>taon rebase</code>  =&gt; rebase current branch with default branch</p> <p><code>taon rebase branch-to-rebase</code>  =&gt; rebase current branch with changes from branch-to-rebase</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#stash","title":"Stash","text":"<p><code>taon stash</code>  =&gt; stash only staged files</p> <p><code>taon stashall</code>  =&gt; stash all files</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#reset-change-branch","title":"Reset + change branch","text":"<p><code>taon branch</code>  =&gt; git fetch / display menu with branches to select / select branch</p> <p><code>taon reset</code>  =&gt; <code>git fetch</code> + remove tmp files for project + <code>taon branch</code> (include children)</p> <p><code>taon reset my-branch</code>  =&gt; same as <code>taon reset</code> but specific branch</p> <p><code>taon reset</code>  =&gt; reset hard and pull (recrusively)</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#pull","title":"Pull","text":"<p><code>taon pull</code>  =&gt; pull current branch or current workspace projects one after another</p> <p><code>taon repull</code>  =&gt; <code>git reset hard --HEAD~10</code> + <code>taon pull</code></p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#push","title":"Push","text":"<p><code>taon pushall</code> =&gt; push code to all remotes(origins) defined in .git/config</p> <p><code>taon pall</code> =&gt; <code>taon pushall</code></p> <p><code>taon push</code>  =&gt; (optionally git add +)  commit with message based on branch name + push current branch</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#smart-conventional-commits-branching","title":"Smart Conventional Commits Branching","text":"<p>Checkout branch + add changes + commit message + push branch</p> <p>Create special branches (with metadata inside name) that can be use later with command <code>taon push</code> to \"re-push\" changes and use matadata from branch name   as commit message.</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#fix","title":"fix","text":"<p>Quick commit and push bugfix <code>taon pfix JIRA-379089 JIRA-380320 proper counter message [my-lib]</code>   &lt;=&gt; <code>git checkout -b bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code> +  <code>git add</code> +  <code>git commit -m \"fix(my-lib): proper counter message JIRA-379089 JIRA-380320\"</code> +  <code>git push origin bugfix/JIRA-379089-JIRA-380320--my-lib--proper-counter-message</code></p> <p>taon pfix &lt;=&gt; taon pushfix &lt;=&gt; taon push:fix</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#feature","title":"feature","text":"<p>Quick commit and push feature <code>taon pf JIRA-379089 JIRA-380320 admin notification [my-lib]</code>  &lt;&gt;=&gt; <code>git checkout -b feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code> +  <code>git add</code> +  <code>git commit -m \"feat(my-lib): admin notification JIRA-379089 JIRA-380320\"</code> +  <code>git push origin feature/JIRA-379089-JIRA-380320--my-lib--admin-notification</code></p> <p>taon pf &lt;=&gt; taon pushfeature &lt;=&gt; taon push:feature</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#chore","title":"chore","text":"<p>Quick commit and push chore  <code>taon pc JIRA-379089 update deps</code> &lt;=&gt;   <code>git checkout -b chore/JIRA-379089-update-deps</code> +  <code>git add</code> +  <code>git commit -m \"chore: update deps JIRA-379089\"</code> +  <code>git push origin  chore/JIRA-379089-update-deps</code></p> <p>taon pc &lt;=&gt; taon chore &lt;=&gt; taon pchore</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#docs","title":"docs","text":"<p>Quick commit and push docs update  <code>taon pd explained installation</code>  &lt;=&gt;  <code>git checkout -b docs/explained-installation</code> +  <code>git add</code> +  <code>git commit -m \"docs:explained installation\"</code> +  <code>git push origin docs/explained-installation</code></p> <p>taon pd &lt;=&gt; taon pdocs</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#test","title":"test","text":"<p>Quick commit and push tests update  <code>taon ptest admin permission new use case</code>  &lt;=&gt;  <code>git checkout -b test/admin-permission-new-use-case</code> +  <code>git add</code> +  <code>git commit -m \"test: admin permission new use case\"</code> +  <code>git push origin test/admin-permission-new-use-case</code></p> <p>taon push:test &lt;=&gt; taon ptest  &lt;=&gt; taon ptests</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#styl","title":"styl","text":"<p>Quick commit and push style update (formatting, linting etc.)  <code>taon pstyle proper project methods</code>  &lt;=&gt;  <code>git checkout -b style/proper-project-methods</code> +  <code>git add</code> +  <code>git commit -m \"style: proper project methods\"</code> +  <code>git push origin style/proper-project-methods</code></p> <p>taon pstyl &lt;=&gt; taon pstyle</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#refactor","title":"refactor","text":"<p>Quick commit and push code refactor  <code>taon pref new permission module</code>  &lt;=&gt;  <code>git checkout -b refactor/new-permission-module</code> +  <code>git add</code> +  <code>git commit -m \"refactor: new permission module\"</code> +  <code>git push origin refactor/new-permission-module</code></p> <p>taon pref &lt;=&gt; taon prefactor</p>"},{"location":"tnp/tnp-helpers/GIT-COMMANDS/#release","title":"release","text":"<p>Quick commit and push release commit  <code>taon prelease</code>  &lt;=&gt;  <code>git checkout -b release/version-v1-2-3</code> +  <code>git add</code> +  <code>git commit -m \"release: version v1.2.3\"</code> +  <code>git push origin release/version-1-2-3</code></p> <p>taon prel &lt;=&gt; taon prelase</p>"},{"location":"tnp/tnp-helpers/TODO/","title":"TODO","text":"<p>\ud83d\udd32 electron app app connected to taon service</p>"},{"location":"tnp/tnp-helpers/src/lib/lib-info/","title":"Lib info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p> <p>This folder is an entry point for npm Angular/NodeJS library</p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/tnp-helpers/src/lib/lowdb/examples/","title":"Examples","text":"<ul> <li>cli.ts - Simple CLI using JSONFileSync adapter</li> <li>server.ts - Express example using JSONFile adapter</li> <li>browser.ts - LocalStorage adapter example</li> <li>in-memory.ts - Example showing how to use in-memory adapter to write fast tests</li> </ul>"},{"location":"tnp/tnp-helpers/src/migrations/migrations-info/","title":"Migrations info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p> <p>This folder is only for storing migration files with auto-generated names.</p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/tnp-helpers/src/tests/mocha-tests-info/","title":"Mocha tests info","text":"<p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"},{"location":"tnp/tnp-helpers/src/tests/mocha-tests-info/#purpose-of-this-folder","title":"Purpose of this folder","text":"<p>Put your backend mocha tests (with .test.ts extension) in this folder or any other tests* folder inside project.</p> <pre><code>/src/lib/my-feature/features.test.ts                          # -&gt; NOT ok, test omitted\n/src/lib/my-feature/tests/features.test.ts                    # -&gt; OK\n/src/lib/my-feature/nested-feature/tests/features.test.ts     # -&gt; OK\n</code></pre>"},{"location":"tnp/tnp-helpers/src/tests/mocha-tests-info/#how-to-test-your-isomorphic-backend","title":"How to test your isomorphic backend ?","text":"<ol> <li> <p>By using console select menu: <pre><code>taon test                   # single run\ntaon test:watch             # watch mode\ntaon test:debug             # and start \"attach\" VSCode debugger\ntaon test:watch:debug       # and start \"attach\" VSCode debugger\n</code></pre></p> </li> <li> <p>Directly: <pre><code>taon mocha                        # single run\ntaon mocha:watch                  # watch mode\ntaon mocha:debug                  # and start \"attach\" VSCode debugger\ntaon mocha:watch:debug            # and start \"attach\" VSCode debugger\n</code></pre></p> </li> </ol>"},{"location":"tnp/tnp-helpers/src/tests/mocha-tests-info/#example","title":"Example","text":"<p>example.test.ts <pre><code>import { describe, before, it } from 'mocha'\nimport { expect } from 'chai';\n\ndescribe('Set name for function or class', () =&gt; {\n\n  it('should keep normal function name ', () =&gt; {\n    expect(1).to.be.eq(Number(1));\n  })\n});\n</code></pre></p> <p>THIS FILE IS GENERATED - DO NOT MODIFY</p>"}]}